{
    "cells": [
        {
            "language": "javascript",
            "source": [
                "const { Plotly, display } = require('node-kernel');\nconst merge = require('deepmerge');\n\nconst normalSizeLayout = {\n    width: 600,\n    height: 400,\n    font: {\n        size: 15,\n    },\n    margin: {\n        l: 80,\n        r: 4,\n        b: 40,\n        t: 50, // for title\n    },\n    yaxis: {\n        title: {\n            standoff: 4,\n        },\n        automargin: true,\n    },\n    xaxis: {\n        automargin: true,\n    }\n}\n\nconst doubleSizeLayout = merge(normalSizeLayout, {\n    width: 1200,\n    height: 800,\n    font: {\n        size: 30,\n    },\n    margin: {\n        l: 160,\n        r: 8,\n        b: 80,\n        t: 100, // for title\n    },\n});\n\nconst sharedLayout = doubleSizeLayout;\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Loading report collections"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import fs from 'fs';\nimport unpackUnityJson from './util/unpackUnityJson';\nimport loadReportCollection from './util/loadReportCollection';\nimport path from 'path';\n\nconst reportCollections = (() => {\n    const reportDir = './reports/';\n    const reportCollections = {};\n    for (const reportFileName of fs.readdirSync(reportDir)) {\n        const reportPath = path.join(reportDir, reportFileName);\n\n        let reportName = reportFileName;\n        const reportNameParts = reportFileName.split('.');\n        reportNameParts.splice(-1, 1);\n        reportName = reportNameParts.join('');\n\n        reportCollections[reportName] = loadReportCollection(\n            unpackUnityJson(JSON.parse(fs.readFileSync(reportPath, 'utf-8')))\n        );\n    }\n\n    return reportCollections;\n})();\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Report format"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "{\n    const reportNames = Object.keys(reportCollections);\n    console.dir({\n        'report names': reportNames,\n        'report format': Object.values(reportCollections)[0][0],\n    });\n}\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{",
                                "  'report names': [ 'Subsampling' ],",
                                "  'report format': {",
                                "    measurement: { rmseByFrame: [Array], aggregated: [Object] },",
                                "    launchParameters: {",
                                "      dispatcherParameters: {},",
                                "      videoName: '2',",
                                "      numIterations: 3,",
                                "      workingTextureSize: 8,",
                                "      numClusters: 16,",
                                "      jitterSize: 1,",
                                "      staggeredJitter: false,",
                                "      doDownscale: false,",
                                "      algorithm: 'KM',",
                                "      doRandomizeEmptyClusters: false,",
                                "      stopCondition: false,",
                                "      readback: false",
                                "    },",
                                "    logTypeName: 'variance'",
                                "  }",
                                "}",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Plots\n\n## Subsampling"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge');\n\n{\n    const reports = reportCollections['Subsampling'];\n\n    const textureSizeOptions = Array.from(\n        new Set(\n            reports.map((report) => report.launchParameters.workingTextureSize)\n        )\n    );\n\n    const videoNameOptions = Array.from(\n        new Set(reports.map((report) => report.launchParameters.videoName))\n    ).sort();\n\n    for (const aggregatedStatName of ['mean', 'peak']) {\n        for (const videoName of videoNameOptions) {\n            const subsetVideo = reports.filter(\n                (report) => report.launchParameters.videoName == videoName\n            );\n\n            const data = textureSizeOptions.map((textureSize) => {\n                const subsetTextureSize = subsetVideo\n                    .filter(\n                        (report) =>\n                            report.launchParameters.workingTextureSize ==\n                            textureSize\n                    )\n                    .reverse();\n\n                return {\n                    y: subsetTextureSize.map(\n                        (report) =>\n                            report.measurement.aggregated[aggregatedStatName]\n                    ),\n\n                    x: subsetTextureSize.map(\n                        (report) => `${report.launchParameters.numClusters}`\n                    ),\n\n                    name: `${textureSize}`,\n                    type: 'bar',\n                };\n            });\n\n            // todo fix definitions Plotly.Layout\n            const layout = merge(sharedLayout, {\n                xaxis: {\n                    title: 'number of clusters',\n                    type: 'category',\n                },\n\n                yaxis: {\n                    title: {\n                        text: `${aggregatedStatName} RMSE`,\n                    },\n                },\n\n                legend: {\n                    title: {\n                        text: 'texture size',\n                    },\n                },\n\n                title: `Subsampling (video ${videoName})`,\n            });\n\n            Plotly.newPlot('', data, layout);\n            display.html('<br>');\n        }\n    }\n}\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "xc7f5796e1fb349b6881c81984562324c",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "y": [
                                            0.1021488209457361,
                                            0.10218488398138993,
                                            0.10218766885540695,
                                            0.10219005517530635,
                                            0.10215015627375433
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "8",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.09658119269932323,
                                            0.09670201424909694,
                                            0.09662303225278288,
                                            0.09670489811650522,
                                            0.09662182897618574
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "16",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.09637875609681297,
                                            0.09648646194852095,
                                            0.09638555090560397,
                                            0.09641510883127424,
                                            0.09649099508249867
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "32",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.09572121053753217,
                                            0.09585129856713473,
                                            0.09572599884789186,
                                            0.09574272846123852,
                                            0.09572066723737396
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "64",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.0952813969435809,
                                            0.09551740581367446,
                                            0.09528591489390215,
                                            0.09530085035816624,
                                            0.09528057538172378
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "128",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.09537188199712676,
                                            0.09548246935819095,
                                            0.09537634942394965,
                                            0.09539042656712551,
                                            0.09537092486935439
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "256",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.09535281958747681,
                                            0.09546135466390289,
                                            0.09535737809853909,
                                            0.0953713870862342,
                                            0.09535190118748017
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "512",
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": {
                                            "standoff": 4,
                                            "text": "mean RMSE"
                                        },
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "title": "number of clusters",
                                        "type": "category"
                                    },
                                    "legend": {
                                        "title": {
                                            "text": "texture size"
                                        }
                                    },
                                    "title": "Subsampling (video 1)"
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><br>"
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "xc7f5796e1fb349b6881c81984562324c",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "y": [
                                            0.10596124971768178,
                                            0.10596256935082383,
                                            0.10580272889809174,
                                            0.1057636124389924,
                                            0.10575945747793809
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "8",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.10030138239684441,
                                            0.10030745442467244,
                                            0.10025186267237897,
                                            0.10028462400551277,
                                            0.10025152221055848
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "16",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.0996877526927162,
                                            0.0999222583425861,
                                            0.09965630133951635,
                                            0.09970803207996116,
                                            0.09970249588934976
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "32",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.09918966510904954,
                                            0.09936783553051858,
                                            0.09916492559886522,
                                            0.09913799522120957,
                                            0.09912905691786011
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "64",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.09879903835477923,
                                            0.09906013084409403,
                                            0.09890017681611148,
                                            0.09883965433104164,
                                            0.09883026230546409
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "128",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.09887760989129625,
                                            0.0990918245398093,
                                            0.0989796887489383,
                                            0.09891796884709005,
                                            0.09890853450997723
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "256",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.09889502810922109,
                                            0.09910574941254183,
                                            0.09899633969972493,
                                            0.0989352544763854,
                                            0.0989259110605638
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "512",
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": {
                                            "standoff": 4,
                                            "text": "mean RMSE"
                                        },
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "title": "number of clusters",
                                        "type": "category"
                                    },
                                    "legend": {
                                        "title": {
                                            "text": "texture size"
                                        }
                                    },
                                    "title": "Subsampling (video 2)"
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><br>"
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "xc7f5796e1fb349b6881c81984562324c",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "y": [
                                            0.14982036125618745,
                                            0.14982036125618745,
                                            0.14982036125618745,
                                            0.14982036125618745,
                                            0.14982036125618745
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "8",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.1439614986910341,
                                            0.1439614986910341,
                                            0.1439614986910341,
                                            0.1439614986910341,
                                            0.1439614986910341
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "16",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.13694525756477935,
                                            0.13694525756477935,
                                            0.13694525756477935,
                                            0.13913398630453638,
                                            0.13798185388885884
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "32",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.1337325192440941,
                                            0.1337325192440941,
                                            0.1337325192440941,
                                            0.1395899776993447,
                                            0.1337325192440941
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "64",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.1325092500030991,
                                            0.1325092500030991,
                                            0.1325092500030991,
                                            0.13909732002274014,
                                            0.1325092500030991
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "128",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.1320228452659618,
                                            0.1320228452659618,
                                            0.13216014134795356,
                                            0.1388317516306164,
                                            0.1320228452659618
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "256",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.1319626093652331,
                                            0.1319626093652331,
                                            0.13219180643448258,
                                            0.13885725417738368,
                                            0.1319626093652331
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "512",
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": {
                                            "standoff": 4,
                                            "text": "peak RMSE"
                                        },
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "title": "number of clusters",
                                        "type": "category"
                                    },
                                    "legend": {
                                        "title": {
                                            "text": "texture size"
                                        }
                                    },
                                    "title": "Subsampling (video 1)"
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><br>"
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "xc7f5796e1fb349b6881c81984562324c",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "y": [
                                            0.24493023403328565,
                                            0.24493023403328565,
                                            0.24493023403328565,
                                            0.24493023403328565,
                                            0.24493023403328565
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "8",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.2011953358719628,
                                            0.2011953358719628,
                                            0.2011953358719628,
                                            0.2011953358719628,
                                            0.2011953358719628
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "16",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.17571890043116206,
                                            0.17571890043116206,
                                            0.17571890043116206,
                                            0.17571890043116206,
                                            0.17571890043116206
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "32",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.15739801784563007,
                                            0.15739801784563007,
                                            0.15739801784563007,
                                            0.15739801784563007,
                                            0.15739801784563007
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "64",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.15683745577066616,
                                            0.15683745577066616,
                                            0.15683745577066616,
                                            0.15683745577066616,
                                            0.15683745577066616
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "128",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.156932253259181,
                                            0.156932253259181,
                                            0.156932253259181,
                                            0.156932253259181,
                                            0.156932253259181
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "256",
                                        "type": "bar"
                                    },
                                    {
                                        "y": [
                                            0.1569592531469003,
                                            0.1569592531469003,
                                            0.1569592531469003,
                                            0.1569592531469003,
                                            0.1569592531469003
                                        ],
                                        "x": [
                                            "4",
                                            "6",
                                            "8",
                                            "12",
                                            "16"
                                        ],
                                        "name": "512",
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": {
                                            "standoff": 4,
                                            "text": "peak RMSE"
                                        },
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "title": "number of clusters",
                                        "type": "category"
                                    },
                                    "legend": {
                                        "title": {
                                            "text": "texture size"
                                        }
                                    },
                                    "title": "Subsampling (video 2)"
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><br>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Subsample vs Downscale"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge');\n\n{\n    const reports = reportCollections['Scaling vs subsampling'];\n\n    const doDownscaleOptions = Array.from(\n        new Set(reports.map((report) => report.launchParameters.doDownscale))\n    );\n\n    const videoNameOptions = Array.from(\n        new Set(reports.map((report) => report.launchParameters.videoName))\n    ).sort();\n\n    for (const aggregatedStatName of ['mean', 'peak']) {\n        for (const videoName of videoNameOptions) {\n            const subsetVideo = reports.filter(\n                (report) => report.launchParameters.videoName == videoName\n            );\n\n            const data = doDownscaleOptions.map((doDownscale) => {\n                const subsetDoDownscale = subsetVideo.filter(\n                    (report) =>\n                        report.launchParameters.doDownscale == doDownscale\n                );\n\n                return {\n                    y: subsetDoDownscale.map(\n                        (report) =>\n                            report.measurement.aggregated[aggregatedStatName]\n                    ),\n\n                    x: subsetDoDownscale.map(\n                        (report) =>\n                            `${report.launchParameters.workingTextureSize}`\n                    ),\n\n                    name: `${doDownscale ? 'downscale' : 'subsample'}`,\n                    type: 'bar',\n                };\n            });\n\n            // todo fix definitions Plotly.Layout\n            const layout = merge(sharedLayout, {\n                xaxis: {\n                    title: 'working texture size',\n                    type: 'category',\n                },\n\n                yaxis: {\n                    title: {\n                        text: `${aggregatedStatName} RMSE`,\n                    },\n                },\n\n                title: `Downscaling vs subsampling (video ${videoName})`,\n            });\n\n            Plotly.newPlot('', data, layout);\n            display.html('<br>');\n        }\n    }\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Jitter\n\n### Scanline jitter"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge');\n\n{\n    const reports = reportCollections['Scanline jitter'];\n\n    const jitterSizeOptions = Array.from(\n        new Set(\n            reports.map((report) =>\n                Number.parseInt(report.launchParameters.jitterSize)\n            )\n        )\n    );\n    jitterSizeOptions.sort((a, b) => a - b);\n\n    const videoNameOptions = Array.from(\n        new Set(reports.map((report) => report.launchParameters.videoName))\n    ).sort();\n\n    for (const aggregatedStatName of ['mean', 'peak']) {\n        for (const videoName of videoNameOptions) {\n            const subsetVideo = reports.filter(\n                (report) => report.launchParameters.videoName == videoName\n            );\n\n            const data = jitterSizeOptions.map((jitterSize) => {\n                const subsetJitterSize = subsetVideo.filter(\n                    (report) => report.launchParameters.jitterSize == jitterSize\n                );\n\n                return {\n                    y: subsetJitterSize.map(\n                        (report) =>\n                            report.measurement.aggregated[aggregatedStatName]\n                    ),\n\n                    x: subsetJitterSize.map(\n                        (report) =>\n                            `${report.launchParameters.workingTextureSize}`\n                    ),\n\n                    name: `${jitterSize}`,\n                    type: 'bar',\n                };\n            });\n\n            // todo fix definitions Plotly.Layout\n            const layout = merge(sharedLayout, {\n                xaxis: {\n                    title: 'working texture size',\n                    type: 'category',\n                },\n\n                yaxis: {\n                    title: {\n                        text: `${aggregatedStatName} RMSE`,\n                    },\n                },\n\n                legend: {\n                    title: {\n                        text: 'jitter size',\n                    },\n                },\n\n                title: `Scanline jitter (video ${videoName})`,\n            });\n\n            Plotly.newPlot('', data, layout);\n            display.html('<br>');\n        }\n    }\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Staggered jitter"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge');\n\n{\n    const reports = reportCollections['Staggered jitter'];\n\n    const jitterSizeOptions = Array.from(\n        new Set(\n            reports.map((report) =>\n                Number.parseInt(report.launchParameters.jitterSize)\n            )\n        )\n    );\n    jitterSizeOptions.sort((a, b) => a - b);\n\n    const videoNameOptions = Array.from(\n        new Set(reports.map((report) => report.launchParameters.videoName))\n    ).sort();\n\n    for (const aggregatedStatName of ['mean', 'peak']) {\n        for (const videoName of videoNameOptions) {\n            const subsetVideo = reports.filter(\n                (report) => report.launchParameters.videoName == videoName\n            );\n\n            const data = jitterSizeOptions.map((jitterSize) => {\n                const subsetJitterSize = subsetVideo.filter(\n                    (report) => report.launchParameters.jitterSize == jitterSize\n                );\n\n                return {\n                    y: subsetJitterSize.map(\n                        (report) =>\n                            report.measurement.aggregated[aggregatedStatName]\n                    ),\n\n                    x: subsetJitterSize.map(\n                        (report) =>\n                            `${report.launchParameters.workingTextureSize}`\n                    ),\n\n                    name: `${jitterSize}`,\n                    type: 'bar',\n                };\n            });\n\n            // todo fix definitions Plotly.Layout\n            const layout = merge(sharedLayout, {\n                xaxis: {\n                    title: 'working texture size',\n                    type: 'category',\n                },\n\n                yaxis: {\n                    title: {\n                        text: `${aggregatedStatName} RMSE`,\n                    },\n                },\n\n                legend: {\n                    title: {\n                        text: 'jitter size',\n                    },\n                },\n\n                title: `Staggered jitter (video ${videoName})`,\n            });\n\n            Plotly.newPlot('', data, layout);\n            display.html('<br>');\n        }\n    }\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Difference"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge');\n\n{\n    const scanlineJitterReports = reportCollections['Scanline jitter'];\n    const staggeredJitterReports = reportCollections['Staggered jitter'];\n\n    const reportPairs = scanlineJitterReports.map((scanlineJitterReport) => {\n        const launchParamsString = JSON.stringify(\n            scanlineJitterReport.launchParameters\n        );\n\n        const staggeredJitterReport = staggeredJitterReports.find(\n            (report) =>\n                JSON.stringify(report.launchParameters) == launchParamsString\n        );\n\n        return {\n            scanlineJitterReport: scanlineJitterReport,\n            staggeredJitterReport: staggeredJitterReport,\n            launchParameters: scanlineJitterReport.launchParameters,\n        };\n    });\n\n    const jitterSizeOptions = Array.from(\n        new Set(\n            scanlineJitterReports.map((report) =>\n                Number.parseInt(report.launchParameters.jitterSize)\n            )\n        )\n    );\n    jitterSizeOptions.sort((a, b) => a - b);\n\n    const videoNameOptions = Array.from(\n        new Set(\n            scanlineJitterReports.map(\n                (report) => report.launchParameters.videoName\n            )\n        )\n    ).sort();\n\n    for (const aggregatedStatName of ['mean', 'peak']) {\n        for (const videoName of videoNameOptions) {\n            const subsetVideo = reportPairs.filter(\n                (reportPair) =>\n                    reportPair.launchParameters.videoName == videoName\n            );\n\n            const data = jitterSizeOptions.map((jitterSize) => {\n                const subsetJitterSize = subsetVideo.filter(\n                    (reportPair) =>\n                        reportPair.launchParameters.jitterSize == jitterSize\n                );\n\n                return {\n                    y: subsetJitterSize.map(\n                        (reportPair) =>\n                            reportPair.scanlineJitterReport.measurement\n                                .aggregated[aggregatedStatName] -\n                            reportPair.staggeredJitterReport.measurement\n                                .aggregated[aggregatedStatName]\n                    ),\n\n                    x: subsetJitterSize.map(\n                        (reportPair) =>\n                            `${reportPair.launchParameters.workingTextureSize}`\n                    ),\n\n                    name: `${jitterSize}`,\n                    type: 'bar',\n                };\n            });\n\n            // todo fix definitions Plotly.Layout\n            const layout = merge(sharedLayout, {\n                xaxis: {\n                    title: 'working texture size',\n                    type: 'category',\n                },\n\n                yaxis: {\n                    title: {\n                        text: `Δ ${aggregatedStatName} RMSE`,\n                    },\n                },\n\n                legend: {\n                    title: {\n                        text: 'jitter size',\n                    },\n                },\n\n                title: `Scanline jitter minus staggered jitter (video ${videoName})`,\n            });\n\n            Plotly.newPlot('', data, layout);\n            display.html('<br>');\n        }\n    }\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Empty cluster randomization"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge');\n\n{\n    const reports = reportCollections['Empty cluster randomization'];\n\n    const videoNameOptions = Array.from(\n        new Set(reports.map((report) => report.launchParameters.videoName))\n    ).sort();\n\n    for (const aggregatedStatName of ['mean', 'peak']) {\n        for (const videoName of videoNameOptions) {\n            const subsetVideo = reports.filter(\n                (report) => report.launchParameters.videoName == videoName\n            );\n\n            const data = [true, false].map((doRandomizeEmptyClusters) => {\n                const subsetJitterSize = subsetVideo.filter(\n                    (report) =>\n                        report.launchParameters.doRandomizeEmptyClusters ==\n                        doRandomizeEmptyClusters\n                );\n\n                return {\n                    y: subsetJitterSize.map(\n                        (report) =>\n                            report.measurement.aggregated[aggregatedStatName]\n                    ),\n\n                    x: subsetJitterSize.map(\n                        (report) =>\n                            `${report.launchParameters.workingTextureSize}`\n                    ),\n\n                    name: `${\n                        doRandomizeEmptyClusters ? 'randomized' : 'unchanged'\n                    }`,\n                    type: 'bar',\n                };\n            });\n\n            // todo fix definitions Plotly.Layout\n            const layout = merge(sharedLayout, {\n                xaxis: {\n                    title: 'working texture size',\n                    type: 'category',\n                },\n\n                yaxis: {\n                    title: {\n                        text: `${aggregatedStatName} RMSE`,\n                    },\n                },\n\n                legend: {\n                    title: {\n                        text: 'empty clusters',\n                    },\n                },\n\n                title: `Empty cluster randomization (video ${videoName})`,\n            });\n\n            Plotly.newPlot('', data, layout);\n            display.html('<br>');\n        }\n    }\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Random Swap - KM iterations"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge');\n\n{\n    const reports = reportCollections['Random swap (1KM) vs Random swap (2KM)'];\n\n    const numIterationsKmOptions = Array.from(\n        new Set(\n            reports.map((report) =>\n                Number.parseInt(\n                    report.launchParameters.dispatcherParameters.numIterationsKm\n                )\n            )\n        )\n    );\n    numIterationsKmOptions.sort((a, b) => a - b);\n\n    const videoNameOptions = Array.from(\n        new Set(reports.map((report) => report.launchParameters.videoName))\n    ).sort();\n\n    for (const aggregatedStatName of ['mean', 'peak']) {\n        for (const videoName of videoNameOptions) {\n            const subsetVideo = reports.filter(\n                (report) => report.launchParameters.videoName == videoName\n            );\n\n            const data = numIterationsKmOptions.map((numIterationsKm) => {\n                const subsetNumIterationsKm = subsetVideo\n                    .filter(\n                        (report) =>\n                            report.launchParameters.dispatcherParameters\n                                .numIterationsKm == numIterationsKm\n                    )\n                    .sort(\n                        (reportA, reportB) =>\n                            reportA.launchParameters.numIterations -\n                            reportB.launchParameters.numIterations\n                    );\n\n                return {\n                    y: subsetNumIterationsKm.map(\n                        (report) =>\n                            report.measurement.aggregated[aggregatedStatName]\n                    ),\n\n                    x: subsetNumIterationsKm.map(\n                        (report) => `${report.launchParameters.numIterations}`\n                    ),\n\n                    name: `${numIterationsKm}`,\n                    type: 'scatter',\n                    mode: 'lines',\n                    line: {\n                        width: 5,\n                    },\n                };\n            });\n\n            // todo fix definitions Plotly.Layout\n            const layout = merge(sharedLayout, {\n                xaxis: {\n                    title: 'total KM iterations',\n                    type: 'category',\n                },\n\n                yaxis: {\n                    title: {\n                        text: `${aggregatedStatName} RMSE`,\n                    },\n                },\n\n                legend: {\n                    title: {\n                        text: 'KM iterations<br>per swap',\n                    },\n                },\n\n                title: `Random swap (video ${videoName})`,\n            });\n\n            Plotly.newPlot('', data, layout);\n            display.html('<br>');\n        }\n    }\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Algorithm covnergence"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge');\n\n{\n    const reports = reportCollections['Algorithm convergence'];\n\n    const workingTextureSizeOptions = Array.from(\n        new Set(\n            reports.map((report) =>\n                Number.parseInt(report.launchParameters.workingTextureSize)\n            )\n        )\n    );\n    workingTextureSizeOptions.sort();\n\n    const algorithmOptions = Array.from(\n        new Set(reports.map((report) => report.launchParameters.algorithm))\n    );\n    algorithmOptions.sort();\n\n    const videoNameOptions = Array.from(\n        new Set(reports.map((report) => report.launchParameters.videoName))\n    ).sort();\n\n    for (const workingTextureSize of workingTextureSizeOptions) {\n        display.markdown(`### Working texture size: ${workingTextureSize}`);\n\n        const subsetTextureSize = reports.filter(\n            (report) =>\n                report.launchParameters.workingTextureSize == workingTextureSize\n        );\n\n        for (const aggregatedStatName of ['mean', 'peak']) {\n            const subsetStopCondition = subsetTextureSize.filter(\n                (report) => report.launchParameters.stopCondition\n            );\n\n            // stop condition bar plot\n            {\n                let data = algorithmOptions.map((algorithm) => {\n                    const subsetAlgorithm = subsetStopCondition.filter(\n                        (report) =>\n                            report.launchParameters.algorithm == algorithm\n                    );\n                    subsetAlgorithm\n                        .sort((report) => report.videoName)\n                        .reverse();\n\n                    return {\n                        y: subsetAlgorithm.map(\n                            (report) =>\n                                report.measurement.aggregated[\n                                    aggregatedStatName\n                                ]\n                        ),\n                        x: subsetAlgorithm.map(\n                            (report) => report.launchParameters.videoName\n                        ),\n                        name: `${algorithm}`,\n                        type: 'bar',\n                    };\n                });\n\n                const layout = merge(sharedLayout, {\n                    xaxis: {\n                        title: 'video',\n                        type: 'category',\n                    },\n\n                    yaxis: {\n                        title: {\n                            text: `${aggregatedStatName} quality`,\n                        },\n                    },\n\n                    title: `working texture size: ${workingTextureSize}`,\n                });\n\n                Plotly.newPlot('', data, layout);\n            }\n\n            for (const lineStopCondition of [true, false]) {\n                for (const videoName of videoNameOptions) {\n                    const subsetVideo = subsetTextureSize\n                        .filter(\n                            (report) =>\n                                report.launchParameters.videoName == videoName\n                        )\n                        .filter(\n                            (report) =>\n                                report.launchParameters.stopCondition == false\n                        );\n\n                    const data = algorithmOptions.map((algorithm) => {\n                        let subsetAlgorithm = subsetVideo\n                            .filter(\n                                (report) =>\n                                    report.launchParameters.algorithm ==\n                                    algorithm\n                            )\n                            .sort(\n                                (reportA, reportB) =>\n                                    reportA.launchParameters.numIterations -\n                                    reportB.launchParameters.numIterations\n                            );\n\n                        if (subsetAlgorithm.length == 0) {\n                            return {};\n                        }\n\n                        return {\n                            y: subsetAlgorithm.map(\n                                (report) =>\n                                    report.measurement.aggregated[\n                                        aggregatedStatName\n                                    ]\n                            ),\n                            x: subsetAlgorithm.map(\n                                (report) =>\n                                    `${report.launchParameters.numIterations}`\n                            ),\n                            name: `${algorithm}`,\n                            legendgroup: `${algorithm}`,\n                            type: 'scatter',\n                            mode: 'lines',\n                            line: {\n                                width: 5,\n                            },\n                        };\n                    });\n\n                    // lines for stop condition\n                    if (lineStopCondition) {\n                        const numIterationOptions = Array.from(\n                            new Set(\n                                reports.map(\n                                    (report) =>\n                                        report.launchParameters.numIterations\n                                )\n                            )\n                        );\n\n                        for (const stopConditionReport of subsetStopCondition.filter(\n                            (report) =>\n                                report.launchParameters.videoName == videoName\n                        )) {\n                            data.push({\n                                y: numIterationOptions.map(\n                                    () =>\n                                        stopConditionReport.measurement\n                                            .aggregated[aggregatedStatName]\n                                ),\n                                x: numIterationOptions,\n                                name: `${stopConditionReport.launchParameters.algorithm} (stop condition)`,\n                                legendgroup: `${stopConditionReport.launchParameters.algorithm}`,\n                                type: 'scatter',\n                                mode: 'lines',\n                                line: {\n                                    width: 5,\n                                },\n                            });\n                        }\n                    }\n\n                    // todo fix definitions Plotly.Layout\n                    const layout = merge(sharedLayout, {\n                        xaxis: {\n                            title: 'total KM iterations',\n                            type: 'linear',\n                        },\n\n                        yaxis: {\n                            title: {\n                                text: `${aggregatedStatName} RMSE`,\n                            },\n                        },\n\n                        title: `video ${videoName}; working texture size: ${workingTextureSize}`,\n                    });\n\n                    Plotly.newPlot('', data, layout);\n                }\n            }\n        }\n    }\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Explanation theory\n\nWhen the input changes significantly between two frames, getting a better clustering structure in one frame can result in a worse starting position for the subsequent frames."
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge');\n\n{\n    const reports = reportCollections['Algorithm convergence'];\n\n    const workingTextureSizeOptions = Array.from(\n        new Set(\n            reports.map((report) =>\n                Number.parseInt(report.launchParameters.workingTextureSize)\n            )\n        )\n    );\n    workingTextureSizeOptions.sort();\n\n    const videoNameOptions = Array.from(\n        new Set(reports.map((report) => report.launchParameters.videoName))\n    ).sort();\n\n    function plotDelta({ algorithm }) {\n        for (const workingTextureSize of workingTextureSizeOptions) {\n            display.markdown(\n                `#### Working texture size: ${workingTextureSize}`\n            );\n            for (const videoName of videoNameOptions) {\n                const subset = reports.filter(\n                    (report) =>\n                        report.launchParameters.videoName == videoName &&\n                        report.launchParameters.algorithm == algorithm &&\n                        report.launchParameters.workingTextureSize ==\n                            workingTextureSize\n                );\n\n                const report3 = subset.find(\n                    (report) => report.launchParameters.numIterations == 3\n                );\n\n                const report5 = subset.find(\n                    (report) => report.launchParameters.numIterations == 5\n                );\n\n                const data = [\n                    {\n                        y: Object.entries(\n                            report5.measurement.rmseByFrame.map(\n                                (entry) => entry.rmse\n                            )\n                        ).map(\n                            (entry) =>\n                                entry[1] -\n                                report3.measurement.rmseByFrame[entry[0]]\n                                    .rmse\n                        ),\n\n                        x: report5.measurement.rmseByFrame.map(\n                            (qualityRecord) => qualityRecord.frameIndex\n                        ),\n                        name: 'plot',\n                        type: 'scatter',\n                        mode: 'lines',\n                    },\n                ];\n\n                // todo fix definitions Plotly.Layout\n                const layout = merge(sharedLayout, {\n                    xaxis: {\n                        title: 'frame index',\n                        type: 'category',\n                    },\n\n                    yaxis: {\n                        title: {\n                            text: `Δ RMSE`,\n                        },\n                    },\n\n                    title: {\n                        text: `${algorithm} RMSE change from 3 to 5 iterations\n<br>\n(video ${videoName}; working texture size: ${workingTextureSize})`,\n                    },\n\n                    margin: {\n                        t: sharedLayout.margin.t + sharedLayout.font.size * 2\n                    }\n                });\n\n                Plotly.newPlot('', data, layout);\n            }\n        }\n    }\n\n    plotDelta({ algorithm: 'KHM' });\n    display.markdown(\n        `KHM RMSE barely ever increases with increases number of iterations, because KHM is less dependent on initialization. Getting a better clustering structure on the current frame can not significantly worsen the performance on subsequent frames.`\n    );\n    plotDelta({ algorithm: 'KM' });\n    display.markdown(\n        `Every spike is preceeded by a section of improved RMSE. When zoomed in, this effect can be observed for smaller spikes as well.\n\nKM is heabily dependent on initialization, so getting a better clustering structure in the current frame can lead to worse initialization subsequent frames.\n\nThough as an overall trend higher number of iterations does lead to smaller RMSE, this effect is strong enough to create situations, where a small increase to the number of iterations leads to worse overall RMSE over the duration of the video.`\n    );\n    plotDelta({ algorithm: 'RS' });\n    display.markdown(\n        `RS is less prone to getting stuck in a local optimum, than both KM and KHM, but how fast it converges still depends on initialization. Getting a better clustering structure in the current frame can lead to worse convergence in the next frame.\n\nWith a fixed number of iterations this leads to higher RMSE. With a stopping condition it would lead to longer processing time.\n`\n    );\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Subsampling vs stability\n\nWhen subsampling, the drastic changes between subsequent frames become more likely. KHM keeps monotonously decreasing RMSE with increased number of iterations, because it does not rely on temporal coherence, but RS becomes erratic.\n\nWith subsampling the important parameter is not stability (temporal coherence), but presence of small details. The chosen subset of pixels might, or might not include pixels belonging to a small object, thus creating significant changes in the clustering structure."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Frame time"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import merge from 'deepmerge';\nimport { report } from 'process';\nimport assert from 'assert/strict';\n\n{\n    const reports =\n        /* \n        aggregate reports\n        minimum frame time from all runs with identical parameter\n        */\n        (() => {\n            const reports = reportCollections['Frame time'];\n\n            /*\n            for (const report of reports) {\n                if (\n                    report.launchParameters.readback &&\n                    report.launchParameters.algorithm == 'RS'\n                ) {\n                    console.log('caught!');\n\n                    report.launchParameters.algorithm = 'RS (readback)';\n                }\n            }\n            */\n\n            function getReportId(report) {\n                const reportId = {\n                    algorithm: report.launchParameters.algorithm,\n                    videoName: report.launchParameters.videoName,\n                    stopCondition: report.launchParameters.stopCondition,\n                    workingTextureSize:\n                        report.launchParameters.workingTextureSize,\n                    readback: report.launchParameters.readback,\n                };\n                reportId.numIterations = reportId.stopCondition\n                    ? undefined\n                    : report.launchParameters.numIterations;\n\n                return JSON.stringify(reportId);\n            }\n\n            const reportIdOptions = Array.from(\n                new Set(reports.map((report) => getReportId(report)))\n            );\n\n            return reportIdOptions.map((reportId) => {\n                const subset = reports.filter(\n                    (report) => getReportId(report) == reportId\n                );\n\n                return subset.reduce((reportA, reportB) => {\n                    return merge(reportA, {\n                        measurement: {\n                            peakFrameTime: Math.min(\n                                reportA.measurement.peakFrameTime,\n                                reportB.measurement.peakFrameTime\n                            ),\n                            avgFrameTime: Math.min(\n                                reportA.measurement.avgFrameTime,\n                                reportB.measurement.avgFrameTime\n                            ),\n                        },\n                    });\n                });\n            });\n        })();\n\n    const videoNameOptions = Array.from(\n        new Set(reports.map((report) => report.launchParameters.videoName))\n    ).sort();\n\n    for (const videoName of videoNameOptions) {\n        const subsetVideoName = reports.filter(\n            (report) => report.launchParameters.videoName == videoName\n        );\n\n        for (const aggregation of ['mean', 'peak']) {\n            const workingTextureSizeOptions = Array.from(\n                new Set(\n                    subsetVideoName.map(\n                        (report) => report.launchParameters.workingTextureSize\n                    )\n                )\n            );\n\n            for (const workingTextureSize of workingTextureSizeOptions) {\n                const subsetTextureSize = subsetVideoName.filter(\n                    (report) =>\n                        report.launchParameters.workingTextureSize ==\n                        workingTextureSize\n                );\n\n                const algorithmIdOptions = Array.from(\n                    new Set(\n                        subsetTextureSize.map(\n                            (report) => report.launchParameters.algorithm\n                        )\n                    )\n                ).sort();\n\n                const data = algorithmIdOptions.map((algorithm) => {\n                    const subsetAlgorithm = subsetTextureSize.filter(\n                        (report) =>\n                            report.launchParameters.algorithm == algorithm\n                    );\n\n                    subsetAlgorithm.sort((reportA, reportB) => {\n                        if (reportA.launchParameters.stopCondition) {\n                            if (reportB.stopCondition) {\n                                return 0;\n                            }\n                            return 1;\n                        }\n                        if (reportB.launchParameters.stopCondition) {\n                            return -1;\n                        }\n                        return (\n                            reportA.launchParameters.numIterations -\n                            reportB.launchParameters.numIterations\n                        );\n                    });\n\n                    return {\n                        x: subsetAlgorithm.map((report) =>\n                            report.launchParameters.stopCondition\n                                ? 'stop condition'\n                                : report.launchParameters.numIterations\n                        ),\n                        y: subsetAlgorithm.map((report) =>\n                            (() => {\n                                switch (aggregation) {\n                                    case 'mean':\n                                        return report.measurement.avgFrameTime;\n                                    case 'peak':\n                                        return report.measurement.peakFrameTime;\n                                    default:\n                                        throw 'invalid aggregation';\n                                }\n                            })()\n                        ),\n                        type: 'bar',\n                        name:\n                            `${subsetAlgorithm[0].launchParameters.algorithm}` +\n                            (subsetAlgorithm[0].launchParameters\n                                .dispatcherParameters.doReadback\n                                ? ' (readback)'\n                                : ''),\n                    };\n                });\n\n                const layout = merge(sharedLayout, {\n                    title: {\n                        text: `video ${videoName}; working texture size: ${workingTextureSize}`,\n                    },\n                    xaxis: {\n                        type: 'category',\n                        title: 'number of iterations',\n                    },\n                    yaxis: {\n                        title: `${aggregation} frame time`,\n                    },\n                });\n\n                Plotly.newPlot('', data, layout);\n            }\n        }\n    }\n}\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}