{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "http://cs.joensuu.fi/sipu/datasets/"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Init"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const { Plotly } = require('node-kernel');"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const sharedLayout = {\n    width: 600,\n    height: 400,\n    font: {\n        size: 15,\n    },\n    margin: {\n        l: 80,\n        r: 4,\n        b: 40,\n        t: 50, // for title\n    },\n};\n\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Run benchmark"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import fs from 'fs';\nimport assert from 'assert/strict';\nimport loadDataset from './loadDataset';\nimport { KMeans, RandomSwap, KHarmonicMeans } from './clustering.ts';\nimport { assert } from 'console';\nimport path from 'path';\nconst copy = require('deepcopy');\n\nconst benchmarkResults = (() => {\n    let results = [];\n\n    const numCenters = 6,\n        maxSamples = 5000,\n        numInits = 2,\n        numRandomSwapRepsPerInit = 40,\n        dimensions = 2,\n        numIterations = 6;\n\n    const inits =\n        // array of initializations\n        Array(numInits)\n            .fill()\n            .map(() =>\n                //array of cluster centers\n                Array(numCenters)\n                    .fill()\n                    .map(() =>\n                        // iterate over coordinates\n                        Array(dimensions)\n                            .fill()\n                            .map(\n                                // uniform random initialization for each coordinate\n                                () => Math.random()\n                            )\n                    )\n            );\n\n    const datasetsPath = './datasets/',\n        filePaths = fs\n            .readdirSync(datasetsPath)\n            .map((filePath) => path.join(datasetsPath, filePath));\n\n    const kMeans = new KMeans(),\n        kHarmonicMeans = new KHarmonicMeans(),\n        randomSwap = new RandomSwap();\n\n    const arrLaunchParams = [];\n\n    for (const filePath of filePaths) {\n        const samples = loadDataset({\n            path: filePath,\n            maxSamples: maxSamples,\n        });\n\n        assert.equal(samples[0].length, dimensions);\n\n        inits.map((initCenters, initVectorId) => {\n            for (const _ of Array(numRandomSwapRepsPerInit)) {\n                arrLaunchParams.push({\n                    algorithm: randomSwap,\n                    samples: samples,\n                    initCenters: initCenters,\n                    initVectorId: initVectorId,\n                });\n            }\n\n            for (algorithm of [kMeans, kHarmonicMeans]) {\n                arrLaunchParams.push({\n                    algorithm: algorithm,\n                    samples: samples,\n                    initCenters: initCenters,\n                    initVectorId: initVectorId,\n                });\n            }\n        });\n    }\n\n    {\n        let lastPercent = 0;\n\n        arrLaunchParams.map((launchParams, launchId) => {\n            const samples = launchParams.samples,\n                attribution = samples.map(() => 0);\n\n            results = results.concat(\n                launchParams.algorithm.runBenchmark({\n                    samples: samples,\n                    attribution: attribution,\n                    initCenters: launchParams.initCenters,\n                    initVectorId: launchParams.initVectorId,\n                    numIterations: numIterations,\n                })\n            );\n            const percentFinished = (launchId / arrLaunchParams.length) * 100;\n            if (percentFinished > lastPercent + 1) {\n                console.log(\n                    `progress: ${percentFinished.toFixed(2).padStart(5)}%    ${\n                        new Date().toString().split(' ')[4]\n                    }`\n                );\n\n                lastPercent = Math.round(percentFinished);\n            }\n        });\n    }\n\n    console.log();\n    console.log(\"finished!\")\n\n    return results;\n})();\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "progress:  1.08%    01:46:28",
                                "progress:  2.06%    01:46:30",
                                "progress:  3.03%    01:46:31",
                                "progress:  4.00%    01:46:33",
                                "progress:  5.09%    01:46:34",
                                "progress:  6.06%    01:46:36",
                                "progress:  7.03%    01:46:37",
                                "progress:  8.01%    01:46:39",
                                "progress:  9.09%    01:46:41",
                                "progress: 10.06%    01:46:43",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "console.log(JSON.stringify(benchmarkResults, null, 2));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.error",
                            "value": {
                                "name": "ReferenceError",
                                "message": "results is not defined",
                                "stack": "    at <Cell 7> [1, 7]\n    at <Cell 7> [4, 46]\n    at Script.runInContext (node:vm:139:12)\n    at Script.runInNewContext (node:vm:144:17)\n    at Object.runInNewContext (node:vm:298:38)\n    at C (/home/madcake/.vscode/extensions/donjayamanne.typescript-notebook-2.0.6/out/extension/server/index.js:2:113345)\n    at t.execCode (/home/madcake/.vscode/extensions/donjayamanne.typescript-notebook-2.0.6/out/extension/server/index.js:2:114312)\n    at k.<anonymous> (/home/madcake/.vscode/extensions/donjayamanne.typescript-notebook-2.0.6/out/extension/server/index.js:2:142156)\n    at k.emit (node:events:527:28)\n    at k.emit (node:domain:475:12)"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}