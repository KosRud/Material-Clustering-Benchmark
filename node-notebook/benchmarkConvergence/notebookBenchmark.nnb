{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Datasets\n\nhttp://cs.joensuu.fi/sipu/datasets/\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Init\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const { Plotly } = require('node-kernel');"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "import fs from 'fs';\r\n\r\nfunction loadOrGenerateReport({ loadFromFile, filePath, generationFunc }) {\r\n    if (loadFromFile) {\r\n        return JSON.parse(fs.readFileSync(filePath, 'utf-8'));\r\n    } else {\r\n        const result = generationFunc();\r\n        fs.writeFileSync(filePath, JSON.stringify(result, null, 2), {\r\n            flag: 'w',\r\n            encoding: 'utf-8',\r\n        });\r\n        return result;\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge')\r\n\r\nconst normalSizeLayout = {\r\n    width: 600,\r\n    height: 400,\r\n    font: {\r\n        size: 15,\r\n    },\r\n    margin: {\r\n        l: 80,\r\n        r: 4,\r\n        b: 40,\r\n        t: 50, // for title\r\n    },\r\n    yaxis: {\r\n        title: {\r\n            standoff: 4,\r\n        },\r\n        automargin: true,\r\n    },\r\n    xaxis: {\r\n        automargin: true,\r\n    }\r\n}\r\n\r\nconst doubleSizeLayout = merge(normalSizeLayout, {\r\n    width: 1200,\r\n    height: 800,\r\n    font: {\r\n        size: 30,\r\n    },\r\n    margin: {\r\n        l: 160,\r\n        r: 8,\r\n        b: 80,\r\n        t: 100, // for title\r\n    },\r\n});\r\n\r\nconst sharedLayout = doubleSizeLayout;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Benchmark convergence"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import fs from 'fs';\r\nimport assert from 'assert/strict';\r\nimport loadDataset from './loadDataset';\r\nimport { KMeans, RandomSwap, KHarmonicMeans } from './clustering/clustering';\r\nimport path from 'path';\r\nimport copy from 'deepcopy';\r\n\r\nconst benchmarkConvergenceResults = loadOrGenerateReport({\r\n    loadFromFile: true,\r\n    filePath: './results/convergence.json',\r\n    generationFunc: () => {\r\n        const numCenters = 6,\r\n            maxSamples = 5000,\r\n            numInits = 40,\r\n            numRandomSwapRepsPerInit = 40,\r\n            dimensions = 2,\r\n            numIterations = 100;\r\n\r\n        let results = [];\r\n\r\n        const inits =\r\n            // array of initializations\r\n            Array(numInits)\r\n                .fill()\r\n                .map(() =>\r\n                    //array of cluster centers\r\n                    Array(numCenters)\r\n                        .fill()\r\n                        .map(() =>\r\n                            // iterate over coordinates\r\n                            Array(dimensions)\r\n                                .fill()\r\n                                .map(\r\n                                    // uniform random initialization for each coordinate\r\n                                    () => Math.random()\r\n                                )\r\n                        )\r\n                );\r\n\r\n        const datasetsPath = './datasets/',\r\n            filePaths = fs\r\n                .readdirSync(datasetsPath)\r\n                .map((filePath) => path.join(datasetsPath, filePath));\r\n\r\n        const arrLaunchParams = [];\r\n\r\n        for (const filePath of filePaths) {\r\n            const samples = loadDataset({\r\n                path: filePath,\r\n                maxSamples: maxSamples,\r\n            });\r\n\r\n            assert.equal(samples[0].length, dimensions);\r\n\r\n            for (const initCenters of inits) {\r\n                arrLaunchParams.push({\r\n                    samples: samples,\r\n                    initCenters: initCenters,\r\n                });\r\n            }\r\n        }\r\n\r\n        let lastPercent = 0;\r\n\r\n        for (const launchId in arrLaunchParams) {\r\n            const { samples, initCenters } = arrLaunchParams[launchId];\r\n\r\n            results = results.concat(\r\n                new KMeans({\r\n                    samples: samples,\r\n                    attribution: samples.map(() => 0),\r\n                    centers: copy(initCenters),\r\n                    numIterations: numIterations,\r\n                }).runClustering()\r\n            );\r\n\r\n            results = results.concat(\r\n                new KHarmonicMeans({\r\n                    samples: samples,\r\n                    attribution: samples.map(() => 0),\r\n                    centers: copy(initCenters),\r\n                    numIterations: numIterations,\r\n                    weights: samples.map(() => initCenters[0].map(() => -1)),\r\n                }).runClustering()\r\n            );\r\n\r\n            for (const _ of Array(numRandomSwapRepsPerInit)) {\r\n                results = results.concat(\r\n                    new RandomSwap({\r\n                        samples: samples,\r\n                        attribution: samples.map(() => 0),\r\n                        centers: copy(initCenters),\r\n                        numIterations: numIterations,\r\n                    }).runClustering()\r\n                );\r\n            }\r\n\r\n            const percentFinished = (launchId / arrLaunchParams.length) * 100;\r\n            if (percentFinished > lastPercent + 1) {\r\n                console.log(\r\n                    `progress: ${percentFinished.toFixed(2).padStart(5)}%    ${\r\n                        new Date().toString().split(' ')[4]\r\n                    }`\r\n                );\r\n\r\n                lastPercent = percentFinished;\r\n            }\r\n        }\r\n\r\n        console.log('');\r\n        console.log('finished!');\r\n\r\n        return results;\r\n    },\r\n});\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Report format\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(JSON.stringify(benchmarkConvergenceResults[0], null, 2));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{",
                                "  \"algorithm\": \"KM\",",
                                "  \"numIterations\": 1,",
                                "  \"variance\": 0.03642280663350515",
                                "}",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Plots"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import merge from 'deepmerge';\r\n\r\n{\r\n    const algorithmOptions = Array.from(\r\n        new Set(benchmarkConvergenceResults.map((result) => result.algorithm))\r\n    );\r\n\r\n    // sqrt(variance)\r\n    {\r\n        const data = algorithmOptions.map((algorithm) => {\r\n            const subsetAlgorithm = benchmarkConvergenceResults.filter(\r\n                (result) => result.algorithm == algorithm\r\n            );\r\n\r\n            const numIterationsOptions = Array.from(\r\n                new Set(subsetAlgorithm.map((result) => result.numIterations))\r\n            );\r\n\r\n            return {\r\n                x: numIterationsOptions,\r\n                y: numIterationsOptions.map((numIterations) => {\r\n                    const subsetNumItrations = subsetAlgorithm.filter(\r\n                        (result) => result.numIterations == numIterations\r\n                    );\r\n\r\n                    return (\r\n                        subsetNumItrations\r\n                            .map((result) => result.variance ** 0.5)\r\n                            .reduce((a, b) => a + b) / subsetNumItrations.length\r\n                    );\r\n                }),\r\n                name: algorithm,\r\n                type: 'scatter',\r\n                mode: 'lines',\r\n\t\t\t\tline: {\r\n\t\t\t\t\twidth: 4\r\n\t\t\t\t}\r\n            };\r\n        });\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: `RMSE`,\r\n            },\r\n            xaxis: {\r\n                title: 'number of iterations',\r\n            },\r\n            title: {\r\n                text: `aggregated RMSE`,\r\n            },\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n\r\n    // change of variance\r\n    {\r\n        const sharedData = {\r\n            type: 'scatter',\r\n            mode: 'lines',\r\n\t\t\tline: {\r\n\t\t\t\twidth: 4\r\n\t\t\t}\r\n        };\r\n\r\n        const data = merge(\r\n            sharedData,\r\n            algorithmOptions.map((algorithm) => {\r\n                const subsetAlgorithm = benchmarkConvergenceResults.filter(\r\n                    (result) => result.algorithm == algorithm\r\n                );\r\n\r\n                const numIterationsOptions = Array.from(\r\n                    new Set(\r\n                        subsetAlgorithm.map((result) => result.numIterations)\r\n                    )\r\n                );\r\n\r\n                const variancePerIteration = numIterationsOptions.map(\r\n                    (numIterations) => {\r\n                        return {\r\n                            numIterations: numIterations,\r\n                            variance: (() => {\r\n                                const subsetNumIterations =\r\n                                    subsetAlgorithm.filter(\r\n                                        (result) =>\r\n                                            result.numIterations ==\r\n                                            numIterations\r\n                                    );\r\n                                return (\r\n                                    subsetNumIterations\r\n                                        .map((result) => result.variance)\r\n                                        .reduce((a, b) => a + b) /\r\n                                    subsetNumIterations.length\r\n                                );\r\n                            })(),\r\n                        };\r\n                    }\r\n                );\r\n                for (const index of [...variancePerIteration.keys()].splice(\r\n                    1\r\n                )) {\r\n                    variancePerIteration[index].deltaVariance =\r\n                        variancePerIteration[index - 1].variance -\r\n                        variancePerIteration[index].variance;\r\n                }\r\n\r\n                variancePerIteration.shift();\r\n\r\n                return {\r\n                    x: variancePerIteration.map(\r\n                        (record) => record.numIterations\r\n                    ),\r\n                    y: variancePerIteration.map(\r\n                        (record) => record.deltaVariance\r\n                    ),\r\n                    name: algorithm,\r\n                    type: 'scatter',\r\n                    mode: 'lines',\r\n\t\t\t\t\tline: {\r\n\t\t\t\t\t\twidth: 4\r\n\t\t\t\t\t}\r\n                };\r\n            })\r\n        );\r\n\r\n        data.push(\r\n            merge(\r\n                sharedData,\r\n                (() => {\r\n                    const numIterationsOptions = Array.from(\r\n                        new Set(\r\n                            benchmarkConvergenceResults\r\n                                .filter(\r\n                                    (result) => result.algorithm == 'KM'\r\n                                )\r\n                                .map((result) => result.numIterations)\r\n                        )\r\n                    );\r\n\r\n                    return {\r\n                        x: numIterationsOptions,\r\n                        y: numIterationsOptions.map(() => 1e-4),\r\n                        name: 'stop condition',\r\n                    };\r\n                })()\r\n            )\r\n        );\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: { text: `Δ MSE`, standoff: 20 },\r\n            },\r\n            xaxis: {\r\n                title: 'number of iterations',\r\n            },\r\n            title: {\r\n                text: `MSE change between iterations`,\r\n            },\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x46a5fc4a92544ef6bab9155ced806e51",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60,
                                            61,
                                            62,
                                            63,
                                            64,
                                            65,
                                            66,
                                            67,
                                            68,
                                            69,
                                            70,
                                            71,
                                            72,
                                            73,
                                            74,
                                            75,
                                            76,
                                            77,
                                            78,
                                            79,
                                            80,
                                            81,
                                            82,
                                            83,
                                            84,
                                            85,
                                            86,
                                            87,
                                            88,
                                            89,
                                            90,
                                            91,
                                            92,
                                            93,
                                            94,
                                            95,
                                            96,
                                            97,
                                            98,
                                            99,
                                            100
                                        ],
                                        "y": [
                                            0.18761681355314822,
                                            0.16221991254797183,
                                            0.15343356519857526,
                                            0.14971999307885697,
                                            0.1476993622572919,
                                            0.14645095493964339,
                                            0.14572265418059321,
                                            0.14522882564459366,
                                            0.14486255464409023,
                                            0.144559454185352,
                                            0.14428573615106877,
                                            0.14407817199695888,
                                            0.143904081064344,
                                            0.14374874365759185,
                                            0.1436470688434336,
                                            0.14357103384740572,
                                            0.14350017491016326,
                                            0.14343108888616377,
                                            0.14336518670286835,
                                            0.1433113438747414,
                                            0.14326957343646168,
                                            0.14323683861097666,
                                            0.14321254474012984,
                                            0.14318466768989796,
                                            0.14315982914309333,
                                            0.14313612966622682,
                                            0.1431145534690506,
                                            0.1430992809623478,
                                            0.14308538667261256,
                                            0.1430761613776191,
                                            0.1430670413365058,
                                            0.14305586173083662,
                                            0.1430461315064726,
                                            0.14303930213432658,
                                            0.14303303654348892,
                                            0.14302686751392696,
                                            0.14302166457867774,
                                            0.1430176198732951,
                                            0.1430154696237609,
                                            0.14301349613769582,
                                            0.14301092809188568,
                                            0.14300804328368258,
                                            0.1430041439844171,
                                            0.1430013539077372,
                                            0.14299966160608243,
                                            0.14299869150744526,
                                            0.14299756480800793,
                                            0.14299628761130478,
                                            0.14299482781861703,
                                            0.14299345186945422,
                                            0.14299197703261068,
                                            0.142991000306617,
                                            0.14299041353480543,
                                            0.1429901814758155,
                                            0.14299000542555515,
                                            0.14298989844357657,
                                            0.14298984369917547,
                                            0.1429898141675226,
                                            0.1429897944959287,
                                            0.14298977936182378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378,
                                            0.1429897738863378
                                        ],
                                        "name": "KM",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60,
                                            61,
                                            62,
                                            63,
                                            64,
                                            65,
                                            66,
                                            67,
                                            68,
                                            69,
                                            70,
                                            71,
                                            72,
                                            73,
                                            74,
                                            75,
                                            76,
                                            77,
                                            78,
                                            79,
                                            80,
                                            81,
                                            82,
                                            83,
                                            84,
                                            85,
                                            86,
                                            87,
                                            88,
                                            89,
                                            90,
                                            91,
                                            92,
                                            93,
                                            94,
                                            95,
                                            96,
                                            97,
                                            98,
                                            99,
                                            100
                                        ],
                                        "y": [
                                            0.20229986140615436,
                                            0.16232336875442238,
                                            0.15060406708470137,
                                            0.1458941684536471,
                                            0.14358869608295796,
                                            0.14231810627211539,
                                            0.14156859228367433,
                                            0.14110182180245628,
                                            0.14076600690817379,
                                            0.140491195557825,
                                            0.14026231300710595,
                                            0.14007851676106794,
                                            0.13991268677019617,
                                            0.13977240278164568,
                                            0.13965315052766974,
                                            0.1395456290674339,
                                            0.1394544642956934,
                                            0.1393808686199956,
                                            0.13931794062625924,
                                            0.13926594984114307,
                                            0.13921252155602937,
                                            0.13916638936639444,
                                            0.1391223295489343,
                                            0.1390810153261821,
                                            0.1390337432889928,
                                            0.13899012050283227,
                                            0.1389503563761121,
                                            0.13890949536219968,
                                            0.13887873224083452,
                                            0.1388535538035534,
                                            0.1388314998341073,
                                            0.13881063208997707,
                                            0.1387891361912142,
                                            0.1387659167183934,
                                            0.13873807866398533,
                                            0.13871107153114617,
                                            0.13868925598685414,
                                            0.1386736378570664,
                                            0.13866150401671715,
                                            0.13865230467137138,
                                            0.13864558560427004,
                                            0.1386392339717553,
                                            0.1386334437093772,
                                            0.13862889346750865,
                                            0.13862199276223605,
                                            0.13861200579558144,
                                            0.13860258469084538,
                                            0.13859281068517762,
                                            0.1385820258527046,
                                            0.13856917537552055,
                                            0.13855676493230515,
                                            0.1385450902658925,
                                            0.13853577862861305,
                                            0.13852973806647723,
                                            0.1385263493939753,
                                            0.13852425052960948,
                                            0.13852343431275335,
                                            0.13852223016481846,
                                            0.13852167558451303,
                                            0.13852087516170403,
                                            0.13852045553685108,
                                            0.13852018361585705,
                                            0.13851963803601963,
                                            0.13851909944029864,
                                            0.13851725812816676,
                                            0.13851413343874222,
                                            0.13851008666765868,
                                            0.13850504481837703,
                                            0.1384992672212109,
                                            0.13849480064009473,
                                            0.1384901322336594,
                                            0.13848639109950153,
                                            0.1384826027534576,
                                            0.13847756479547824,
                                            0.13847252015022707,
                                            0.1384689454365435,
                                            0.13846667181960748,
                                            0.13846556234820634,
                                            0.13846511671310713,
                                            0.13846535804605672,
                                            0.13846542994527328,
                                            0.13846568404441245,
                                            0.13846588472363075,
                                            0.13846603584568223,
                                            0.1384655126264589,
                                            0.1384646538204241,
                                            0.13846407274347275,
                                            0.1384638823560527,
                                            0.1384636766377378,
                                            0.13846333897225013,
                                            0.13846261869656812,
                                            0.1384601023046853,
                                            0.13845861867957154,
                                            0.13845754812749042,
                                            0.13845679490795332,
                                            0.1384560668373854,
                                            0.13845554999402254,
                                            0.13845527010872274,
                                            0.1384550171010646,
                                            0.1384547249226461
                                        ],
                                        "name": "KHM",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "x": [
                                            2,
                                            4,
                                            6,
                                            8,
                                            10,
                                            12,
                                            14,
                                            16,
                                            18,
                                            20,
                                            22,
                                            24,
                                            26,
                                            28,
                                            30,
                                            32,
                                            34,
                                            36,
                                            38,
                                            40,
                                            42,
                                            44,
                                            46,
                                            48,
                                            50,
                                            52,
                                            54,
                                            56,
                                            58,
                                            60,
                                            62,
                                            64,
                                            66,
                                            68,
                                            70,
                                            72,
                                            74,
                                            76,
                                            78,
                                            80,
                                            82,
                                            84,
                                            86,
                                            88,
                                            90,
                                            92,
                                            94,
                                            96,
                                            98,
                                            100
                                        ],
                                        "y": [
                                            0.16123208619034848,
                                            0.15032936828162716,
                                            0.14637428261203406,
                                            0.14423433526847643,
                                            0.14287829461923895,
                                            0.1419608018697494,
                                            0.14125093212838835,
                                            0.14073598462935175,
                                            0.14029683727662765,
                                            0.13994774627887863,
                                            0.1396425877233118,
                                            0.13938347250316666,
                                            0.13916432599232956,
                                            0.1389605321711858,
                                            0.13879172551475752,
                                            0.13863498212736658,
                                            0.13850620837183453,
                                            0.13837921441381362,
                                            0.13826445819489452,
                                            0.1381627990227483,
                                            0.13805892392476748,
                                            0.1379727984388637,
                                            0.13789685365293533,
                                            0.13782713046453052,
                                            0.13776207156783535,
                                            0.13769750123828653,
                                            0.1376395507666049,
                                            0.1375918621505668,
                                            0.13754332376924683,
                                            0.1374955911092234,
                                            0.13744922253754108,
                                            0.1374073514394611,
                                            0.13736974183983533,
                                            0.1373338087996385,
                                            0.13730126968467082,
                                            0.1372703944549901,
                                            0.13724080300696384,
                                            0.13721157706564782,
                                            0.13718416582698942,
                                            0.13715785556547894,
                                            0.13713072470351217,
                                            0.1371069780026237,
                                            0.13708528833545902,
                                            0.1370644567020242,
                                            0.13704496666948654,
                                            0.13702502092012778,
                                            0.1370056998903575,
                                            0.13698896027996496,
                                            0.13697252778894756,
                                            0.13695584656725535
                                        ],
                                        "name": "Random swap",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "RMSE",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "title": "number of iterations"
                                    },
                                    "title": {
                                        "text": "aggregated RMSE"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x46a5fc4a92544ef6bab9155ced806e51",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60,
                                            61,
                                            62,
                                            63,
                                            64,
                                            65,
                                            66,
                                            67,
                                            68,
                                            69,
                                            70,
                                            71,
                                            72,
                                            73,
                                            74,
                                            75,
                                            76,
                                            77,
                                            78,
                                            79,
                                            80,
                                            81,
                                            82,
                                            83,
                                            84,
                                            85,
                                            86,
                                            87,
                                            88,
                                            89,
                                            90,
                                            91,
                                            92,
                                            93,
                                            94,
                                            95,
                                            96,
                                            97,
                                            98,
                                            99,
                                            100
                                        ],
                                        "y": [
                                            0.009196195161009581,
                                            0.0028583516587071083,
                                            0.0011462810620767455,
                                            0.000607249278334835,
                                            0.00037185322796920786,
                                            0.000212664053237447,
                                            0.0001425944382944487,
                                            0.00010559758803950145,
                                            0.00008780350323270639,
                                            0.00008020617386588977,
                                            0.00006074666112905469,
                                            0.000051035793250130135,
                                            0.00004588626501604229,
                                            0.00002968378088507098,
                                            0.00002203272666108022,
                                            0.00002080079080969688,
                                            0.0000200388849781602,
                                            0.00001861553037572558,
                                            0.000015039292202277676,
                                            0.000011658409858152086,
                                            0.000009169904829485487,
                                            0.000006881682228131875,
                                            0.000007961074803622403,
                                            0.000006923335128829894,
                                            0.000006574674570200556,
                                            0.0000060594339062018665,
                                            0.000004221437831766067,
                                            0.000003707597043021288,
                                            0.0000024022945815348196,
                                            0.0000023910195499771136,
                                            0.0000030001917106538267,
                                            0.000002668913345413998,
                                            0.0000019530960585004142,
                                            0.0000018214910084309033,
                                            0.0000017260166165246338,
                                            0.0000013997142915694871,
                                            0.000001063442215235716,
                                            5.856238638919653e-7,
                                            5.836841235618007e-7,
                                            7.76469375327743e-7,
                                            8.549757952794335e-7,
                                            0.0000011530105920309897,
                                            8.251758123224706e-7,
                                            5.023516491189928e-7,
                                            2.838702343951893e-7,
                                            3.303263881142271e-7,
                                            3.746617068603464e-7,
                                            4.3677924620871833e-7,
                                            4.159499383364629e-7,
                                            4.463194780077173e-7,
                                            2.9276172962278135e-7,
                                            1.75748050435659e-7,
                                            7.002702315933584e-8,
                                            5.439858629524563e-8,
                                            3.3433126798293467e-8,
                                            1.703535720473659e-8,
                                            9.286970425320673e-9,
                                            6.236094248629476e-9,
                                            4.830554806850573e-9,
                                            1.7476344919831188e-9,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                        ],
                                        "name": "KM",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "x": [
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60,
                                            61,
                                            62,
                                            63,
                                            64,
                                            65,
                                            66,
                                            67,
                                            68,
                                            69,
                                            70,
                                            71,
                                            72,
                                            73,
                                            74,
                                            75,
                                            76,
                                            77,
                                            78,
                                            79,
                                            80,
                                            81,
                                            82,
                                            83,
                                            84,
                                            85,
                                            86,
                                            87,
                                            88,
                                            89,
                                            90,
                                            91,
                                            92,
                                            93,
                                            94,
                                            95,
                                            96,
                                            97,
                                            98,
                                            99,
                                            100
                                        ],
                                        "y": [
                                            0.01529559883230825,
                                            0.003782613387979531,
                                            0.0014130195750099162,
                                            0.0006620300162320583,
                                            0.00035812230070193796,
                                            0.0002123761492561424,
                                            0.00013180811317577146,
                                            0.00009566032801060914,
                                            0.00007857289677263776,
                                            0.00006580017784143036,
                                            0.000053289197895288465,
                                            0.00004801760637276192,
                                            0.000040715428257731556,
                                            0.00003448692524910674,
                                            0.00003103762757813641,
                                            0.000026177668986292202,
                                            0.000021206214820997105,
                                            0.000018093062391470738,
                                            0.000014972544120150227,
                                            0.000015471324153183003,
                                            0.000013344470108093281,
                                            0.00001265291296584023,
                                            0.000011751350001115712,
                                            0.000013522999103812022,
                                            0.000012438904934582162,
                                            0.000011369807820214156,
                                            0.00001173417502081664,
                                            0.000008800602390994505,
                                            0.0000071404037692429645,
                                            0.0000062402102305736395,
                                            0.0000058497734956169944,
                                            0.000005954219403574157,
                                            0.000006427303462282902,
                                            0.000007849517285756641,
                                            0.00000766352725875899,
                                            0.000006215253261526721,
                                            0.0000044814677732929464,
                                            0.000003503197641196998,
                                            0.0000026562996680752626,
                                            0.000001956872666238757,
                                            0.0000018761504157575881,
                                            0.0000016990610975098352,
                                            0.0000013256886533426215,
                                            0.0000019402736759939476,
                                            0.0000027669588395645706,
                                            0.000002608746868259376,
                                            0.000002817621447024493,
                                            0.000003119418000328139,
                                            0.0000036598927565176242,
                                            0.00000354089807861821,
                                            0.00000333940094381438,
                                            0.0000027240255062420393,
                                            0.0000017846622451037075,
                                            0.000001004334649747779,
                                            6.223397949096932e-7,
                                            2.4068125162660103e-7,
                                            3.3965674945540814e-7,
                                            1.4787878759026096e-7,
                                            2.2342984810214128e-7,
                                            1.1043296842608297e-7,
                                            6.765526058827298e-8,
                                            1.4274586962806368e-7,
                                            1.5313558989968334e-7,
                                            5.609526179013724e-7,
                                            9.666445242410837e-7,
                                            0.000001252046554291869,
                                            0.0000015519115033127417,
                                            0.000001758387724502819,
                                            0.000001349454016648377,
                                            0.000001418333390422466,
                                            0.0000011320823100104127,
                                            0.0000011524140240554148,
                                            0.0000015330469389819579,
                                            0.000001538567316005518,
                                            0.0000010739590670764965,
                                            6.838560800137561e-7,
                                            3.328320181128497e-7,
                                            1.3734350185617972e-7,
                                            -6.810055018166561e-8,
                                            -2.137381758735013e-8,
                                            -7.180667403045016e-8,
                                            -5.2998455665753674e-8,
                                            -3.813362188520575e-8,
                                            1.5628467937844892e-7,
                                            2.597638070617192e-7,
                                            1.7217011809983473e-7,
                                            5.301624331557897e-8,
                                            5.89008224277654e-8,
                                            9.86357517746006e-8,
                                            2.2003743202839154e-7,
                                            7.721991929672545e-7,
                                            4.5209063423076734e-7,
                                            3.2163949287289384e-7,
                                            2.244752883087675e-7,
                                            2.1955346580365687e-7,
                                            1.5552932702139755e-7,
                                            8.189874646860607e-8,
                                            7.521332911000767e-8,
                                            8.943762745336481e-8
                                        ],
                                        "name": "KHM",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "x": [
                                            4,
                                            6,
                                            8,
                                            10,
                                            12,
                                            14,
                                            16,
                                            18,
                                            20,
                                            22,
                                            24,
                                            26,
                                            28,
                                            30,
                                            32,
                                            34,
                                            36,
                                            38,
                                            40,
                                            42,
                                            44,
                                            46,
                                            48,
                                            50,
                                            52,
                                            54,
                                            56,
                                            58,
                                            60,
                                            62,
                                            64,
                                            66,
                                            68,
                                            70,
                                            72,
                                            74,
                                            76,
                                            78,
                                            80,
                                            82,
                                            84,
                                            86,
                                            88,
                                            90,
                                            92,
                                            94,
                                            96,
                                            98,
                                            100
                                        ],
                                        "y": [
                                            0.0035038786856605615,
                                            0.0011952762404786946,
                                            0.0006244624007926969,
                                            0.0003877502047583553,
                                            0.0002588710531015101,
                                            0.00019785209842160603,
                                            0.00014315865346085574,
                                            0.00012170006705694916,
                                            0.00009608663524194455,
                                            0.00008360435331369181,
                                            0.00007060728665979343,
                                            0.00006006787750261963,
                                            0.00005533276549681346,
                                            0.00004605167608836766,
                                            0.00004270041988850212,
                                            0.00003514773896259871,
                                            0.00003439115901602077,
                                            0.00003120661310886119,
                                            0.00002757500019255968,
                                            0.00002800992203463165,
                                            0.000023371815892240383,
                                            0.000020511582487964947,
                                            0.000019059992593800645,
                                            0.00001770591029151211,
                                            0.000017391784074772404,
                                            0.000015807968219889307,
                                            0.000012999119483068922,
                                            0.000013061862166183907,
                                            0.000012874836568206594,
                                            0.000012426329414227943,
                                            0.00001144729671265915,
                                            0.000010193725655260194,
                                            0.0000097847869124576,
                                            0.000008873505910653168,
                                            0.000008384434323265022,
                                            0.000008048353599889035,
                                            0.000007997753824980774,
                                            0.0000074527848755376325,
                                            0.000007157814378350169,
                                            0.000007239555776247103,
                                            0.000006472170223561363,
                                            0.000005895693321857076,
                                            0.00000567133790682281,
                                            0.000005332635835478272,
                                            0.0000054960890049603195,
                                            0.000005253109977228915,
                                            0.000004562470270457614,
                                            0.000004456139769761641,
                                            0.000004497919659791905
                                        ],
                                        "name": "Random swap",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        },
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60,
                                            61,
                                            62,
                                            63,
                                            64,
                                            65,
                                            66,
                                            67,
                                            68,
                                            69,
                                            70,
                                            71,
                                            72,
                                            73,
                                            74,
                                            75,
                                            76,
                                            77,
                                            78,
                                            79,
                                            80,
                                            81,
                                            82,
                                            83,
                                            84,
                                            85,
                                            86,
                                            87,
                                            88,
                                            89,
                                            90,
                                            91,
                                            92,
                                            93,
                                            94,
                                            95,
                                            96,
                                            97,
                                            98,
                                            99,
                                            100
                                        ],
                                        "y": [
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001
                                        ],
                                        "name": "stop condition"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": {
                                            "standoff": 20,
                                            "text": "Δ MSE"
                                        },
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "title": "number of iterations"
                                    },
                                    "title": {
                                        "text": "MSE change between iterations"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Benchmark stop condition"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import fs from 'fs';\r\nimport assert from 'assert/strict';\r\nimport loadDataset from './loadDataset';\r\nimport { KMeans, RandomSwap, KHarmonicMeans } from './clustering/clustering';\r\nimport path from 'path';\r\nimport copy from 'deepcopy';\r\n\r\nconst benchmarkStopConditionResults = loadOrGenerateReport({\r\n    loadFromFile: true,\r\n    filePath: './results/stopCondition.json',\r\n    generationFunc: () => {\r\n        const numCenters = 6,\r\n            maxSamples = 5000,\r\n            numInits = 40,\r\n            numRandomSwapRepsPerInit = 40,\r\n            dimensions = 2,\r\n            deltaVarianceThreshold = 1e-4;\r\n\r\n        let results = [];\r\n\r\n        const inits =\r\n            // array of initializations\r\n            Array(numInits)\r\n                .fill()\r\n                .map(() =>\r\n                    //array of cluster centers\r\n                    Array(numCenters)\r\n                        .fill()\r\n                        .map(() =>\r\n                            // iterate over coordinates\r\n                            Array(dimensions)\r\n                                .fill()\r\n                                .map(\r\n                                    // uniform random initialization for each coordinate\r\n                                    () => Math.random()\r\n                                )\r\n                        )\r\n                );\r\n\r\n        const datasetsPath = './datasets/',\r\n            filePaths = fs\r\n                .readdirSync(datasetsPath)\r\n                .map((filePath) => path.join(datasetsPath, filePath));\r\n\r\n        const arrLaunchParams = [];\r\n\r\n        for (const filePath of filePaths) {\r\n            const samples = loadDataset({\r\n                path: filePath,\r\n                maxSamples: maxSamples,\r\n            });\r\n\r\n            assert.equal(samples[0].length, dimensions);\r\n\r\n            for (const initCenters of inits) {\r\n                arrLaunchParams.push({\r\n                    samples: samples,\r\n                    initCenters: initCenters,\r\n                });\r\n            }\r\n        }\r\n\r\n        let lastPercent = 0;\r\n\r\n        for (const launchId in arrLaunchParams) {\r\n            const { samples, initCenters } = arrLaunchParams[launchId];\r\n\r\n            const stopCondition = {\r\n                deltaVariance: deltaVarianceThreshold,\r\n                failedSwaps: 0,\r\n            };\r\n\r\n            results = results.concat(\r\n                new KMeans({\r\n                    samples: samples,\r\n                    attribution: samples.map(() => 0),\r\n                    centers: copy(initCenters),\r\n                    numIterations: stopCondition,\r\n                }).runClustering()\r\n            );\r\n\r\n            results = results.concat(\r\n                new KHarmonicMeans({\r\n                    samples: samples,\r\n                    attribution: samples.map(() => 0),\r\n                    centers: copy(initCenters),\r\n                    numIterations: stopCondition,\r\n                    weights: samples.map(() => initCenters[0].map(() => -1)),\r\n                }).runClustering()\r\n            );\r\n\r\n            for (const failedSwaps of [0, 1, 2, 3, 4, 5, 6, 7, 8]) {\r\n                const stopCondition = {\r\n                    deltaVariance: deltaVarianceThreshold,\r\n                    failedSwaps: failedSwaps,\r\n                };\r\n\r\n                for (const _ of Array(numRandomSwapRepsPerInit)) {\r\n                    results = results.concat(\r\n                        new RandomSwap({\r\n                            samples: samples,\r\n                            attribution: samples.map(() => 0),\r\n                            centers: copy(initCenters),\r\n                            numIterations: stopCondition,\r\n                        }).runClustering()\r\n                    );\r\n                }\r\n            }\r\n\r\n            const percentFinished = (launchId / arrLaunchParams.length) * 100;\r\n            if (percentFinished > lastPercent + 1) {\r\n                console.log(\r\n                    `progress: ${percentFinished.toFixed(2).padStart(5)}%    ${\r\n                        new Date().toString().split(' ')[4]\r\n                    }`\r\n                );\r\n\r\n                lastPercent = percentFinished;\r\n            }\r\n        }\r\n\r\n        console.log('');\r\n        console.log('finished!');\r\n\r\n        return results;\r\n    },\r\n});\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Report format"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(\r\n    JSON.stringify(\r\n        benchmarkStopConditionResults.find(\r\n            (report) => report.algorithm == 'Random swap'\r\n        ),\r\n        null,\r\n        2\r\n    )\r\n);\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "undefined",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Plots"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge');\r\n\r\n{\r\n    function getResultId(report) {\r\n        return JSON.stringify({\r\n            algorithm: report.algorithm,\r\n            stopCondition: report.stopCondition,\r\n        });\r\n    }\r\n    const resultIdOptions = Array.from(\r\n        new Set(\r\n            benchmarkStopConditionResults.map((result) => getResultId(result))\r\n        )\r\n    );\r\n\r\n    const aggregatedResults = resultIdOptions\r\n        .map((resultId) => {\r\n            const subsetResultId = benchmarkStopConditionResults.filter(\r\n                (result) => getResultId(result) == resultId\r\n            );\r\n\r\n            function getResultName(result) {\r\n                let name = result.algorithm;\r\n\r\n                if (result.stopCondition != undefined) {\r\n                    name += ` - ${result.stopCondition.failedSwaps} bad swaps`;\r\n                }\r\n\r\n                return name;\r\n            }\r\n\r\n            return {\r\n                name: getResultName(subsetResultId[0]),\r\n                meanRMSE:\r\n                    subsetResultId\r\n                        .map((result) => result.variance ** 0.5)\r\n                        .reduce((rmseA, rmseB) => rmseA + rmseB) /\r\n                    subsetResultId.length,\r\n                meanNumIterations:\r\n                    subsetResultId\r\n                        .map((result) => result.numIterations)\r\n                        .reduce(\r\n                            (numIterationsA, numIterationsB) =>\r\n                                numIterationsA + numIterationsB\r\n                        ) / subsetResultId.length,\r\n                peakRMSE: subsetResultId\r\n                    .map((result) => result.variance ** 0.5)\r\n                    .reduce((rmseA, rmseB) => Math.max(rmseA, rmseB)),\r\n                peakNumIterations: subsetResultId\r\n                    .map((result) => result.numIterations)\r\n                    .reduce((numIterationsA, numIterationsB) =>\r\n                        Math.max(numIterationsA, numIterationsB)\r\n                    ),\r\n            };\r\n        })\r\n        .sort((resultA, resultB) => resultA.name > resultB.name);\r\n\r\n    // mean RMSE\r\n    {\r\n        const data = [\r\n            {\r\n                x: aggregatedResults.map((result) => result.name),\r\n                y: aggregatedResults.map((result) => result.meanRMSE),\r\n                type: 'bar',\r\n            },\r\n        ];\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: 'mean RMSE',\r\n            },\r\n            xaxis: {\r\n                tickangle: 60,\r\n            },\r\n            bargap: 800,\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n\r\n    // mean number of iterations\r\n    {\r\n        const data = [\r\n            {\r\n                x: aggregatedResults.map((result) => result.name),\r\n                y: aggregatedResults.map((result) => result.meanNumIterations),\r\n                type: 'bar',\r\n            },\r\n        ];\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: 'mean number of iterations',\r\n            },\r\n            xaxis: {\r\n                tickangle: 60,\r\n            },\r\n            bargap: 800,\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n\r\n    // peak RMSE\r\n    {\r\n        const data = [\r\n            {\r\n                x: aggregatedResults.map((result) => result.name),\r\n                y: aggregatedResults.map((result) => result.peakRMSE),\r\n                type: 'bar',\r\n            },\r\n        ];\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: 'peak RMSE',\r\n            },\r\n            xaxis: {\r\n                tickangle: 60,\r\n            },\r\n            bargap: 800,\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n\r\n    // peak number of iterations\r\n    {\r\n        const data = [\r\n            {\r\n                x: aggregatedResults.map((result) => result.name),\r\n                y: aggregatedResults.map((result) => result.peakNumIterations),\r\n                type: 'bar',\r\n            },\r\n        ];\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: 'peak number of iterations',\r\n            },\r\n            xaxis: {\r\n                tickangle: 60,\r\n            },\r\n            bargap: 800,\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x53660689c1314f1fb59df37638fc5b89",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            "KM",
                                            "KHM",
                                            "RS - 0 bad swaps",
                                            "RS - 1 bad swaps",
                                            "RS - 2 bad swaps",
                                            "RS - 3 bad swaps",
                                            "RS - 4 bad swaps",
                                            "RS - 5 bad swaps",
                                            "RS - 6 bad swaps",
                                            "RS - 7 bad swaps",
                                            "RS - 8 bad swaps"
                                        ],
                                        "y": [
                                            0.14538941529506152,
                                            0.1409072498750742,
                                            0.23370714188465042,
                                            0.2240009002309923,
                                            0.2177399156863856,
                                            0.21253786135447775,
                                            0.2078860727450141,
                                            0.20458648221238548,
                                            0.20097592292982858,
                                            0.19842240675554157,
                                            0.1946586639621705
                                        ],
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "mean RMSE",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "tickangle": 60
                                    },
                                    "bargap": 800
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x53660689c1314f1fb59df37638fc5b89",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            "KM",
                                            "KHM",
                                            "RS - 0 bad swaps",
                                            "RS - 1 bad swaps",
                                            "RS - 2 bad swaps",
                                            "RS - 3 bad swaps",
                                            "RS - 4 bad swaps",
                                            "RS - 5 bad swaps",
                                            "RS - 6 bad swaps",
                                            "RS - 7 bad swaps",
                                            "RS - 8 bad swaps"
                                        ],
                                        "y": [
                                            7.011363636363637,
                                            7.384090909090909,
                                            6.737159090909091,
                                            9.717386363636363,
                                            12.221477272727272,
                                            14.41090909090909,
                                            16.373977272727274,
                                            18.294090909090908,
                                            19.999318181818182,
                                            21.64318181818182,
                                            23.238295454545455
                                        ],
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "mean number of iterations",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "tickangle": 60
                                    },
                                    "bargap": 800
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x53660689c1314f1fb59df37638fc5b89",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            "KM",
                                            "KHM",
                                            "RS - 0 bad swaps",
                                            "RS - 1 bad swaps",
                                            "RS - 2 bad swaps",
                                            "RS - 3 bad swaps",
                                            "RS - 4 bad swaps",
                                            "RS - 5 bad swaps",
                                            "RS - 6 bad swaps",
                                            "RS - 7 bad swaps",
                                            "RS - 8 bad swaps"
                                        ],
                                        "y": [
                                            0.21517933294844077,
                                            0.16473464125873974,
                                            0.5445109467594436,
                                            0.4333745340425267,
                                            0.4312264980836157,
                                            0.4270161291514887,
                                            0.4521794556605972,
                                            0.42591958907247385,
                                            0.42591958907247385,
                                            0.4249541556981918,
                                            0.42591958907247385
                                        ],
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "peak RMSE",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "tickangle": 60
                                    },
                                    "bargap": 800
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x53660689c1314f1fb59df37638fc5b89",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            "KM",
                                            "KHM",
                                            "RS - 0 bad swaps",
                                            "RS - 1 bad swaps",
                                            "RS - 2 bad swaps",
                                            "RS - 3 bad swaps",
                                            "RS - 4 bad swaps",
                                            "RS - 5 bad swaps",
                                            "RS - 6 bad swaps",
                                            "RS - 7 bad swaps",
                                            "RS - 8 bad swaps"
                                        ],
                                        "y": [
                                            20,
                                            21,
                                            20,
                                            24,
                                            28,
                                            30,
                                            30,
                                            36,
                                            40,
                                            38,
                                            44
                                        ],
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "peak number of iterations",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "tickangle": 60
                                    },
                                    "bargap": 800
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}