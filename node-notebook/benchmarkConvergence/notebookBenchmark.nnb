{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Datasets\n\nhttp://cs.joensuu.fi/sipu/datasets/\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Init\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const { Plotly } = require('node-kernel');"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "import fs from 'fs';\r\n\r\nfunction loadOrGenerateReport({ loadFromFile, filePath, generationFunc }) {\r\n    if (loadFromFile) {\r\n        return JSON.parse(fs.readFileSync(filePath, 'utf-8'));\r\n    } else {\r\n        const result = generationFunc();\r\n        fs.writeFileSync(filePath, JSON.stringify(result, null, 2), {\r\n            flag: 'w',\r\n            encoding: 'utf-8',\r\n        });\r\n        return result;\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge')\r\n\r\nconst normalSizeLayout = {\r\n    width: 600,\r\n    height: 400,\r\n    font: {\r\n        size: 15,\r\n    },\r\n    margin: {\r\n        l: 80,\r\n        r: 4,\r\n        b: 40,\r\n        t: 50, // for title\r\n    },\r\n    yaxis: {\r\n        title: {\r\n            standoff: 4,\r\n        },\r\n        automargin: true,\r\n    },\r\n    xaxis: {\r\n        automargin: true,\r\n    }\r\n}\r\n\r\nconst doubleSizeLayout = merge(normalSizeLayout, {\r\n    width: 1200,\r\n    height: 800,\r\n    font: {\r\n        size: 30,\r\n    },\r\n    margin: {\r\n        l: 160,\r\n        r: 8,\r\n        b: 80,\r\n        t: 100, // for title\r\n    },\r\n});\r\n\r\nconst sharedLayout = doubleSizeLayout;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Benchmark convergence"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import fs from 'fs';\r\nimport assert from 'assert/strict';\r\nimport loadDataset from './loadDataset';\r\nimport { KMeans, RandomSwap, KHarmonicMeans } from './clustering/clustering';\r\nimport path from 'path';\r\nimport copy from 'deepcopy';\r\n\r\nconst benchmarkConvergenceResults = loadOrGenerateReport({\r\n    loadFromFile: true,\r\n    filePath: './results/convergence.json',\r\n    generationFunc: () => {\r\n        const numCenters = 6,\r\n            maxSamples = 5000,\r\n            numInits = 100,\r\n            numRandomSwapRepsPerInit = 1,\r\n            dimensions = 2,\r\n            numIterations = 100;\r\n\r\n        let results = [];\r\n\r\n        const inits =\r\n            // array of initializations\r\n            Array(numInits)\r\n                .fill()\r\n                .map(() =>\r\n                    //array of cluster centers\r\n                    Array(numCenters)\r\n                        .fill()\r\n                        .map(() =>\r\n                            // iterate over coordinates\r\n                            Array(dimensions)\r\n                                .fill()\r\n                                .map(\r\n                                    // uniform random initialization for each coordinate\r\n                                    () => Math.random()\r\n                                )\r\n                        )\r\n                );\r\n\r\n        const datasetsPath = './datasets/',\r\n            filePaths = fs\r\n                .readdirSync(datasetsPath)\r\n                .map((filePath) => path.join(datasetsPath, filePath));\r\n\r\n        const arrLaunchParams = [];\r\n\r\n        for (const filePath of filePaths) {\r\n            const samples = loadDataset({\r\n                path: filePath,\r\n                maxSamples: maxSamples,\r\n            });\r\n\r\n            assert.equal(samples[0].length, dimensions);\r\n\r\n            for (const initCenters of inits) {\r\n                arrLaunchParams.push({\r\n                    samples: samples,\r\n                    initCenters: initCenters,\r\n                });\r\n            }\r\n        }\r\n\r\n        let lastPercent = 0;\r\n\r\n        for (const launchId in arrLaunchParams) {\r\n            const { samples, initCenters } = arrLaunchParams[launchId];\r\n\r\n            results = results.concat(\r\n                new KMeans({\r\n                    samples: samples,\r\n                    attribution: samples.map(() => 0),\r\n                    centers: copy(initCenters),\r\n                    numIterations: numIterations,\r\n                }).runClustering()\r\n            );\r\n\r\n            results = results.concat(\r\n                new KHarmonicMeans({\r\n                    samples: samples,\r\n                    attribution: samples.map(() => 0),\r\n                    centers: copy(initCenters),\r\n                    numIterations: numIterations,\r\n                    weights: samples.map(() => initCenters[0].map(() => -1)),\r\n                }).runClustering()\r\n            );\r\n\r\n            for (const _ of Array(numRandomSwapRepsPerInit)) {\r\n                results = results.concat(\r\n                    new RandomSwap({\r\n                        samples: samples,\r\n                        attribution: samples.map(() => 0),\r\n                        centers: copy(initCenters),\r\n                        numIterations: numIterations,\r\n                    }).runClustering()\r\n                );\r\n            }\r\n\r\n            const percentFinished = (launchId / arrLaunchParams.length) * 100;\r\n            if (percentFinished > lastPercent + 1) {\r\n                console.log(\r\n                    `progress: ${percentFinished.toFixed(2).padStart(5)}%    ${\r\n                        new Date().toString().split(' ')[4]\r\n                    }`\r\n                );\r\n\r\n                lastPercent = percentFinished;\r\n            }\r\n        }\r\n\r\n        console.log('');\r\n        console.log('finished!');\r\n\r\n        return results;\r\n    },\r\n});\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Report format\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(JSON.stringify(benchmarkConvergenceResults[0], null, 2));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{",
                                "  \"algorithm\": \"KM\",",
                                "  \"numIterations\": 1,",
                                "  \"variance\": 0.040341627057897025",
                                "}",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Plots"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import merge from 'deepmerge';\r\n\r\n{\r\n    const algorithmOptions = Array.from(\r\n        new Set(benchmarkConvergenceResults.map((result) => result.algorithm))\r\n    );\r\n\r\n    // sqrt(variance)\r\n    {\r\n        const data = algorithmOptions.map((algorithm) => {\r\n            const subsetAlgorithm = benchmarkConvergenceResults.filter(\r\n                (result) => result.algorithm == algorithm\r\n            );\r\n\r\n            const numIterationsOptions = Array.from(\r\n                new Set(subsetAlgorithm.map((result) => result.numIterations))\r\n            );\r\n\r\n            return {\r\n                x: numIterationsOptions,\r\n                y: numIterationsOptions.map((numIterations) => {\r\n                    const subsetNumItrations = subsetAlgorithm.filter(\r\n                        (result) => result.numIterations == numIterations\r\n                    );\r\n\r\n                    return (\r\n                        subsetNumItrations\r\n                            .map((result) => result.variance ** 0.5)\r\n                            .reduce((a, b) => a + b) / subsetNumItrations.length\r\n                    );\r\n                }),\r\n                name: algorithm,\r\n                type: 'scatter',\r\n                mode: 'lines',\r\n\t\t\t\tline: {\r\n\t\t\t\t\twidth: 4\r\n\t\t\t\t}\r\n            };\r\n        });\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: `RMSE`,\r\n            },\r\n            xaxis: {\r\n                title: 'number of iterations',\r\n            },\r\n            title: {\r\n                text: `aggregated RMSE`,\r\n            },\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n\r\n    // change of variance\r\n    {\r\n        const sharedData = {\r\n            type: 'scatter',\r\n            mode: 'lines',\r\n\t\t\tline: {\r\n\t\t\t\twidth: 4\r\n\t\t\t}\r\n        };\r\n\r\n        const data = merge(\r\n            sharedData,\r\n            algorithmOptions.map((algorithm) => {\r\n                const subsetAlgorithm = benchmarkConvergenceResults.filter(\r\n                    (result) => result.algorithm == algorithm\r\n                );\r\n\r\n                const numIterationsOptions = Array.from(\r\n                    new Set(\r\n                        subsetAlgorithm.map((result) => result.numIterations)\r\n                    )\r\n                );\r\n\r\n                const variancePerIteration = numIterationsOptions.map(\r\n                    (numIterations) => {\r\n                        return {\r\n                            numIterations: numIterations,\r\n                            variance: (() => {\r\n                                const subsetNumIterations =\r\n                                    subsetAlgorithm.filter(\r\n                                        (result) =>\r\n                                            result.numIterations ==\r\n                                            numIterations\r\n                                    );\r\n                                return (\r\n                                    subsetNumIterations\r\n                                        .map((result) => result.variance)\r\n                                        .reduce((a, b) => a + b) /\r\n                                    subsetNumIterations.length\r\n                                );\r\n                            })(),\r\n                        };\r\n                    }\r\n                );\r\n                for (const index of [...variancePerIteration.keys()].splice(\r\n                    1\r\n                )) {\r\n                    variancePerIteration[index].deltaVariance =\r\n                        variancePerIteration[index - 1].variance -\r\n                        variancePerIteration[index].variance;\r\n                }\r\n\r\n                variancePerIteration.shift();\r\n\r\n                return {\r\n                    x: variancePerIteration.map(\r\n                        (record) => record.numIterations\r\n                    ),\r\n                    y: variancePerIteration.map(\r\n                        (record) => record.deltaVariance\r\n                    ),\r\n                    name: algorithm,\r\n                    type: 'scatter',\r\n                    mode: 'lines',\r\n\t\t\t\t\tline: {\r\n\t\t\t\t\t\twidth: 4\r\n\t\t\t\t\t}\r\n                };\r\n            })\r\n        );\r\n\r\n        data.push(\r\n            merge(\r\n                sharedData,\r\n                (() => {\r\n                    const numIterationsOptions = Array.from(\r\n                        new Set(\r\n                            benchmarkConvergenceResults\r\n                                .filter(\r\n                                    (result) => result.algorithm == 'KM'\r\n                                )\r\n                                .map((result) => result.numIterations)\r\n                        )\r\n                    );\r\n\r\n                    return {\r\n                        x: numIterationsOptions,\r\n                        y: numIterationsOptions.map(() => 1e-4),\r\n                        name: 'stop condition',\r\n                    };\r\n                })()\r\n            )\r\n        );\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: { text: `Δ MSE`, standoff: 20 },\r\n            },\r\n            xaxis: {\r\n                title: 'number of iterations',\r\n            },\r\n            title: {\r\n                text: `MSE change between iterations`,\r\n            },\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x7ab4bf99327e42f0b9b3fca24d70b35e",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60,
                                            61,
                                            62,
                                            63,
                                            64,
                                            65,
                                            66,
                                            67,
                                            68,
                                            69,
                                            70,
                                            71,
                                            72,
                                            73,
                                            74,
                                            75,
                                            76,
                                            77,
                                            78,
                                            79,
                                            80,
                                            81,
                                            82,
                                            83,
                                            84,
                                            85,
                                            86,
                                            87,
                                            88,
                                            89,
                                            90,
                                            91,
                                            92,
                                            93,
                                            94,
                                            95,
                                            96,
                                            97,
                                            98,
                                            99,
                                            100
                                        ],
                                        "y": [
                                            0.1848405948573691,
                                            0.16073984246157286,
                                            0.15260596524028688,
                                            0.14881640054221207,
                                            0.14687346149964345,
                                            0.14573003768860693,
                                            0.1449807350859825,
                                            0.14448702845060024,
                                            0.1440972184646649,
                                            0.14382395409495388,
                                            0.1436018879671081,
                                            0.14342008254197314,
                                            0.14328562731143152,
                                            0.14317234228980588,
                                            0.1430743370175638,
                                            0.1429925849553597,
                                            0.14292192768193668,
                                            0.142867016510159,
                                            0.1428215104748209,
                                            0.14277965020932756,
                                            0.14274029231749566,
                                            0.1427047978418331,
                                            0.14267509755413776,
                                            0.14264801382605205,
                                            0.14262663817638113,
                                            0.1426093939953173,
                                            0.14259290818245665,
                                            0.14257722522178345,
                                            0.14256516870345862,
                                            0.14255292081117216,
                                            0.1425361341646447,
                                            0.1425224860256162,
                                            0.14251179459702304,
                                            0.1425027378224225,
                                            0.14249558657118178,
                                            0.142487491797941,
                                            0.1424776419186628,
                                            0.14246933330065564,
                                            0.14246321892377695,
                                            0.14245839592328743,
                                            0.14245533132361876,
                                            0.14245289715888668,
                                            0.14245039116299543,
                                            0.14244780287131223,
                                            0.14244618621855745,
                                            0.1424449250530098,
                                            0.1424437021999439,
                                            0.14244194792337483,
                                            0.1424406016324335,
                                            0.1424384857847998,
                                            0.14243688661955586,
                                            0.14243539610888595,
                                            0.14243487852586625,
                                            0.14243450529597934,
                                            0.1424342166437947,
                                            0.14243351710686913,
                                            0.14243281633434987,
                                            0.14243259692836344,
                                            0.1424325475857332,
                                            0.1424325238583093,
                                            0.1424325105735895,
                                            0.14243249889927895,
                                            0.14243249212962045,
                                            0.14243248883258763,
                                            0.14243248652671395,
                                            0.14243248188116506,
                                            0.14243247596034192,
                                            0.14243247038448947,
                                            0.14243246447628813,
                                            0.14243245751802638,
                                            0.14243244476106207,
                                            0.14243242995758454,
                                            0.14243238166734845,
                                            0.1424321454799539,
                                            0.1424319927879352,
                                            0.14243194435995857,
                                            0.14243192351619155,
                                            0.14243188992878875,
                                            0.14243152639588014,
                                            0.1424305458279406,
                                            0.14243018622084577,
                                            0.1424300296030084,
                                            0.14243000828788457,
                                            0.1424300062589479,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773,
                                            0.14243000598064773
                                        ],
                                        "name": "KM",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60,
                                            61,
                                            62,
                                            63,
                                            64,
                                            65,
                                            66,
                                            67,
                                            68,
                                            69,
                                            70,
                                            71,
                                            72,
                                            73,
                                            74,
                                            75,
                                            76,
                                            77,
                                            78,
                                            79,
                                            80,
                                            81,
                                            82,
                                            83,
                                            84,
                                            85,
                                            86,
                                            87,
                                            88,
                                            89,
                                            90,
                                            91,
                                            92,
                                            93,
                                            94,
                                            95,
                                            96,
                                            97,
                                            98,
                                            99,
                                            100
                                        ],
                                        "y": [
                                            0.19976161139813214,
                                            0.16148238108126844,
                                            0.1504918171164019,
                                            0.14599645317519908,
                                            0.14384051233580697,
                                            0.14256494712572382,
                                            0.14173498472128102,
                                            0.1411834922492095,
                                            0.14077941843341849,
                                            0.14046459804937336,
                                            0.14022070388906466,
                                            0.1400166721441579,
                                            0.1398401957345459,
                                            0.13970408030637962,
                                            0.13958705324931409,
                                            0.1394844808048493,
                                            0.13940361207621468,
                                            0.13933981111655974,
                                            0.13928096969240997,
                                            0.13922352799203302,
                                            0.1391708301192257,
                                            0.13912678883390864,
                                            0.13908642915992944,
                                            0.13904895713525997,
                                            0.13901394132605163,
                                            0.13898218910697716,
                                            0.1389549583463018,
                                            0.13892843015239756,
                                            0.13890462249722785,
                                            0.13888476725737298,
                                            0.13886833760887543,
                                            0.13885220659630684,
                                            0.138836656113699,
                                            0.13882251940869458,
                                            0.13880971828490704,
                                            0.13879897098106095,
                                            0.13878889178314507,
                                            0.13877936405432817,
                                            0.13876909859522682,
                                            0.13876091128836163,
                                            0.13875500983092293,
                                            0.13874863452986294,
                                            0.1387403950591316,
                                            0.138731342567929,
                                            0.13872334570241976,
                                            0.138715919356863,
                                            0.13870881794006604,
                                            0.13870224734284545,
                                            0.13869726368447338,
                                            0.1386930940213801,
                                            0.13868907908434602,
                                            0.13868554135390407,
                                            0.13868244749678155,
                                            0.13867913087467396,
                                            0.13867488766229596,
                                            0.1386707249059607,
                                            0.13866783490504353,
                                            0.13866545594474622,
                                            0.13866316914359395,
                                            0.13866079608855625,
                                            0.1386586966763772,
                                            0.13865663802538664,
                                            0.13865481095301474,
                                            0.13865248858216142,
                                            0.13864945762352457,
                                            0.13864649551062208,
                                            0.13864402637812082,
                                            0.13864190203015875,
                                            0.13863993194123236,
                                            0.13863791474038342,
                                            0.1386359618541874,
                                            0.13863375915150702,
                                            0.13863188158634868,
                                            0.13862978788984617,
                                            0.13862750933070012,
                                            0.1386247682267883,
                                            0.1386220455793153,
                                            0.1386187824267114,
                                            0.1386145771812826,
                                            0.13860948336640955,
                                            0.1386038918268347,
                                            0.13859948794482174,
                                            0.13859569577898212,
                                            0.13859235244985527,
                                            0.13858942332223206,
                                            0.13858661196965108,
                                            0.13858406094146153,
                                            0.13858125206878716,
                                            0.13857865585257778,
                                            0.1385761653899005,
                                            0.13857307437369024,
                                            0.1385701580832282,
                                            0.1385670988836775,
                                            0.13856448973374028,
                                            0.13856224472479223,
                                            0.13856028999453499,
                                            0.13855807834504716,
                                            0.1385553789099169,
                                            0.13855234088628499,
                                            0.13854980853487756
                                        ],
                                        "name": "KHM",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "x": [
                                            2,
                                            4,
                                            6,
                                            8,
                                            10,
                                            12,
                                            14,
                                            16,
                                            18,
                                            20,
                                            22,
                                            24,
                                            26,
                                            28,
                                            30,
                                            32,
                                            34,
                                            36,
                                            38,
                                            40,
                                            42,
                                            44,
                                            46,
                                            48,
                                            50,
                                            52,
                                            54,
                                            56,
                                            58,
                                            60,
                                            62,
                                            64,
                                            66,
                                            68,
                                            70,
                                            72,
                                            74,
                                            76,
                                            78,
                                            80,
                                            82,
                                            84,
                                            86,
                                            88,
                                            90,
                                            92,
                                            94,
                                            96,
                                            98,
                                            100
                                        ],
                                        "y": [
                                            0.15995479369472732,
                                            0.14999684299696478,
                                            0.14638540202558822,
                                            0.14423289013422722,
                                            0.14277080879346607,
                                            0.14190425006923685,
                                            0.14128071990026267,
                                            0.14078268718712547,
                                            0.14037461210024396,
                                            0.14000140624446067,
                                            0.13972423795408503,
                                            0.13951542264124706,
                                            0.13921395219187493,
                                            0.13903992478638896,
                                            0.13886899607452724,
                                            0.13868929980418707,
                                            0.13852832208292842,
                                            0.13838990280854857,
                                            0.13827702295642416,
                                            0.1381753359070819,
                                            0.1380914085834855,
                                            0.13801206649503672,
                                            0.13792308431740052,
                                            0.1378635382924201,
                                            0.13777989199908008,
                                            0.13771316206620413,
                                            0.13766372668615742,
                                            0.13762094273675207,
                                            0.1375741815232275,
                                            0.13753203347833715,
                                            0.13748488281242632,
                                            0.13744476189321758,
                                            0.137403793467881,
                                            0.13735738806248915,
                                            0.13732579842106835,
                                            0.1372751195481531,
                                            0.13724733978509032,
                                            0.13721745284086523,
                                            0.13718959507655265,
                                            0.13716836159252507,
                                            0.13714098720750803,
                                            0.1371163007382232,
                                            0.13708489020121634,
                                            0.13706433161182235,
                                            0.13704520652271918,
                                            0.1370300578581195,
                                            0.13701350086976316,
                                            0.1369945927705097,
                                            0.1369737308036694,
                                            0.136961687477864
                                        ],
                                        "name": "Random swap",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "RMSE",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "title": "number of iterations"
                                    },
                                    "title": {
                                        "text": "aggregated RMSE"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x7ab4bf99327e42f0b9b3fca24d70b35e",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60,
                                            61,
                                            62,
                                            63,
                                            64,
                                            65,
                                            66,
                                            67,
                                            68,
                                            69,
                                            70,
                                            71,
                                            72,
                                            73,
                                            74,
                                            75,
                                            76,
                                            77,
                                            78,
                                            79,
                                            80,
                                            81,
                                            82,
                                            83,
                                            84,
                                            85,
                                            86,
                                            87,
                                            88,
                                            89,
                                            90,
                                            91,
                                            92,
                                            93,
                                            94,
                                            95,
                                            96,
                                            97,
                                            98,
                                            99,
                                            100
                                        ],
                                        "y": [
                                            0.008600304715378228,
                                            0.002605947648679094,
                                            0.0011774108086957114,
                                            0.0005863453637259194,
                                            0.00033887196808914805,
                                            0.00021983354586654208,
                                            0.00014224058690003039,
                                            0.00011223821629394864,
                                            0.00007874089753893976,
                                            0.00006380564201628053,
                                            0.0000521415719603735,
                                            0.00003856276744287207,
                                            0.000032578863051892226,
                                            0.000028120514020468085,
                                            0.00002331871968074342,
                                            0.00002019782072020665,
                                            0.000015670914876569214,
                                            0.000013056552020631468,
                                            0.000012065907163804485,
                                            0.000011403435079552354,
                                            0.00001027727695931957,
                                            0.00000856767766941463,
                                            0.000007764326785571207,
                                            0.0000060754579494191885,
                                            0.000005000929916672975,
                                            0.000004841913332786357,
                                            0.0000045770310197930375,
                                            0.0000035210683351841188,
                                            0.000003568831516358173,
                                            0.000004889079235809862,
                                            0.000003947120688470307,
                                            0.0000030381973906701276,
                                            0.0000025684503002186554,
                                            0.0000020826143571246736,
                                            0.0000023908347524387308,
                                            0.0000028462268717999173,
                                            0.0000023392838330790755,
                                            0.0000016698906421183657,
                                            0.0000012927910087862093,
                                            8.371656100222835e-7,
                                            6.966908445704689e-7,
                                            7.25632136509835e-7,
                                            7.442586572765919e-7,
                                            4.562485268443106e-7,
                                            3.5031679858701925e-7,
                                            3.3699293437716715e-7,
                                            4.816065946183778e-7,
                                            3.485559206470312e-7,
                                            5.484674296639402e-7,
                                            4.2875024047067667e-7,
                                            4.259042500447119e-7,
                                            1.4662007145199718e-7,
                                            1.046918271727093e-7,
                                            7.565166598028084e-8,
                                            1.6751734372918992e-7,
                                            1.648961773792479e-7,
                                            5.2009535105729254e-8,
                                            1.2453830185860104e-8,
                                            6.385489040305892e-9,
                                            3.6419105578500144e-9,
                                            3.3266354254601893e-9,
                                            1.9969623177296114e-9,
                                            9.79437607406819e-10,
                                            6.900639747120518e-10,
                                            1.3695405642888403e-9,
                                            1.7279070674280916e-9,
                                            1.6154403960355612e-9,
                                            1.7246676031756891e-9,
                                            2.0225631863768356e-9,
                                            3.7077997755430303e-9,
                                            4.30216815297535e-9,
                                            1.4030696583733349e-8,
                                            6.855018437959548e-8,
                                            4.425146855197015e-8,
                                            1.4024132952150659e-8,
                                            6.0345044933241e-9,
                                            9.721919082272823e-9,
                                            1.0506628811413066e-7,
                                            2.8194858935418066e-7,
                                            1.0286985783342084e-7,
                                            4.471344759379714e-8,
                                            6.081167323174208e-9,
                                            5.787999593498405e-10,
                                            7.939070581497454e-11,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                        ],
                                        "name": "KM",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "x": [
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60,
                                            61,
                                            62,
                                            63,
                                            64,
                                            65,
                                            66,
                                            67,
                                            68,
                                            69,
                                            70,
                                            71,
                                            72,
                                            73,
                                            74,
                                            75,
                                            76,
                                            77,
                                            78,
                                            79,
                                            80,
                                            81,
                                            82,
                                            83,
                                            84,
                                            85,
                                            86,
                                            87,
                                            88,
                                            89,
                                            90,
                                            91,
                                            92,
                                            93,
                                            94,
                                            95,
                                            96,
                                            97,
                                            98,
                                            99,
                                            100
                                        ],
                                        "y": [
                                            0.014497890096578196,
                                            0.0035955109335844768,
                                            0.001358677859221783,
                                            0.0006260412733124845,
                                            0.00036403628768497814,
                                            0.0002355537481298041,
                                            0.00015686932712371399,
                                            0.00011533942731322203,
                                            0.00008943589968738244,
                                            0.00006939015540472285,
                                            0.0000582385960582639,
                                            0.00005034479316021537,
                                            0.00003865357643976011,
                                            0.00003290479428925269,
                                            0.000028687845144585722,
                                            0.000022381491259413494,
                                            0.000017572204431895444,
                                            0.00001622369038724314,
                                            0.000016067434537445774,
                                            0.000014736717706527458,
                                            0.000012252795726652027,
                                            0.000011275993143596702,
                                            0.000010565569690479393,
                                            0.000009925124278210157,
                                            0.000008974587545042267,
                                            0.000007668929220879667,
                                            0.000007448914550480662,
                                            0.00000663009466190384,
                                            0.000005515357905105933,
                                            0.000004631600330470831,
                                            0.000004625051946115233,
                                            0.0000044630063502984485,
                                            0.000004025230277031333,
                                            0.000003645582635328909,
                                            0.000003049115484168863,
                                            0.0000028915931713502374,
                                            0.000002727871960796213,
                                            0.0000029174426871107773,
                                            0.0000023118327294700813,
                                            0.0000016816924837508018,
                                            0.0000017746102448923384,
                                            0.000002269832426210483,
                                            0.0000025309159019312744,
                                            0.000002251030324824238,
                                            0.0000021111245867150297,
                                            0.000002011206282993838,
                                            0.0000018463811434707433,
                                            0.0000014423048616506173,
                                            0.0000012344953223587807,
                                            0.000001223011675162422,
                                            0.0000010906569756531648,
                                            9.573317309163887e-7,
                                            0.000001022727835288395,
                                            0.0000012826595266746121,
                                            0.000001224018898033502,
                                            8.583770009402969e-7,
                                            7.190164913878361e-7,
                                            7.004316393555143e-7,
                                            7.317905748385756e-7,
                                            6.575449473453232e-7,
                                            6.422497068996058e-7,
                                            5.691686458184075e-7,
                                            7.119475428953026e-7,
                                            9.21975064349656e-7,
                                            8.948588256264822e-7,
                                            7.515700854790475e-7,
                                            6.455733985687162e-7,
                                            6.012044636155567e-7,
                                            6.161827285321164e-7,
                                            6.054904116356563e-7,
                                            6.864144426466101e-7,
                                            5.940750959186614e-7,
                                            6.668936484467702e-7,
                                            7.237024200572317e-7,
                                            8.64375666688455e-7,
                                            8.573655154268944e-7,
                                            0.0000010124684854638522,
                                            0.0000012630723250223186,
                                            0.0000014964137997515448,
                                            0.0000016389539259954733,
                                            0.0000013254552847646872,
                                            0.0000011512326990800736,
                                            0.0000010207099525420815,
                                            8.925369162568475e-7,
                                            8.593239352074067e-7,
                                            7.76632540628458e-7,
                                            8.491061195964322e-7,
                                            7.838763650715175e-7,
                                            7.539214431293018e-7,
                                            9.27132325603125e-7,
                                            8.745311983054949e-7,
                                            9.141268662027358e-7,
                                            7.821901840190937e-7,
                                            6.770255906174416e-7,
                                            5.91050089211731e-7,
                                            6.613255643939109e-7,
                                            7.970919772316842e-7,
                                            8.955273962246713e-7,
                                            7.535434851206613e-7
                                        ],
                                        "name": "KHM",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "x": [
                                            4,
                                            6,
                                            8,
                                            10,
                                            12,
                                            14,
                                            16,
                                            18,
                                            20,
                                            22,
                                            24,
                                            26,
                                            28,
                                            30,
                                            32,
                                            34,
                                            36,
                                            38,
                                            40,
                                            42,
                                            44,
                                            46,
                                            48,
                                            50,
                                            52,
                                            54,
                                            56,
                                            58,
                                            60,
                                            62,
                                            64,
                                            66,
                                            68,
                                            70,
                                            72,
                                            74,
                                            76,
                                            78,
                                            80,
                                            82,
                                            84,
                                            86,
                                            88,
                                            90,
                                            92,
                                            94,
                                            96,
                                            98,
                                            100
                                        ],
                                        "y": [
                                            0.0031964549093407915,
                                            0.0010853827517275268,
                                            0.0006251799276145165,
                                            0.00041356646169212613,
                                            0.00024353591216031215,
                                            0.00017520112729093457,
                                            0.00013950782230158498,
                                            0.00011131479286274892,
                                            0.00010249910313148147,
                                            0.00007865320716364879,
                                            0.00005726005449225094,
                                            0.00007949429918212986,
                                            0.000049357474077922625,
                                            0.000048648415226764524,
                                            0.00004826760917764697,
                                            0.000044487766893443886,
                                            0.00003738945513619488,
                                            0.000030500804437769147,
                                            0.000028639949073372417,
                                            0.000023245401620630712,
                                            0.00002186961148520003,
                                            0.000023767114100143455,
                                            0.000016677701496988634,
                                            0.000022337695450621448,
                                            0.000018166017735722628,
                                            0.000013676834898709855,
                                            0.00001178691102429047,
                                            0.000013164429573657432,
                                            0.000011105929163840456,
                                            0.000013040736312679851,
                                            0.000011316965855160538,
                                            0.000011115983641337562,
                                            0.000012708094213810528,
                                            0.00000918989461945463,
                                            0.000013190396103222868,
                                            0.000008009465045030056,
                                            0.000007873514830412931,
                                            0.00000786739223073915,
                                            0.000005451452857269112,
                                            0.000007707752273058976,
                                            0.000006441196239017483,
                                            0.000008538373257767351,
                                            0.000005485057298332263,
                                            0.000005471374085092712,
                                            0.0000042485096487868135,
                                            0.000004245032492983941,
                                            0.000005225081076105226,
                                            0.000005698529341090219,
                                            0.0000033820507451820525
                                        ],
                                        "name": "Random swap",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        },
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60,
                                            61,
                                            62,
                                            63,
                                            64,
                                            65,
                                            66,
                                            67,
                                            68,
                                            69,
                                            70,
                                            71,
                                            72,
                                            73,
                                            74,
                                            75,
                                            76,
                                            77,
                                            78,
                                            79,
                                            80,
                                            81,
                                            82,
                                            83,
                                            84,
                                            85,
                                            86,
                                            87,
                                            88,
                                            89,
                                            90,
                                            91,
                                            92,
                                            93,
                                            94,
                                            95,
                                            96,
                                            97,
                                            98,
                                            99,
                                            100
                                        ],
                                        "y": [
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001
                                        ],
                                        "name": "stop condition"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": {
                                            "standoff": 20,
                                            "text": "Δ MSE"
                                        },
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "title": "number of iterations"
                                    },
                                    "title": {
                                        "text": "MSE change between iterations"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Benchmark stop condition"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import fs from 'fs';\r\nimport assert from 'assert/strict';\r\nimport loadDataset from './loadDataset';\r\nimport { KMeans, RandomSwap, KHarmonicMeans } from './clustering/clustering';\r\nimport path from 'path';\r\nimport copy from 'deepcopy';\r\n\r\nconst benchmarkStopConditionResults = loadOrGenerateReport({\r\n    loadFromFile: true,\r\n    filePath: './results/stopCondition.json',\r\n    generationFunc: () => {\r\n        const numCenters = 6,\r\n            maxSamples = 5000,\r\n            numInits = 100,\r\n            numRandomSwapRepsPerInit = 1,\r\n            dimensions = 2,\r\n            deltaVarianceThreshold = 1e-4;\r\n\r\n        let results = [];\r\n\r\n        const inits =\r\n            // array of initializations\r\n            Array(numInits)\r\n                .fill()\r\n                .map(() =>\r\n                    //array of cluster centers\r\n                    Array(numCenters)\r\n                        .fill()\r\n                        .map(() =>\r\n                            // iterate over coordinates\r\n                            Array(dimensions)\r\n                                .fill()\r\n                                .map(\r\n                                    // uniform random initialization for each coordinate\r\n                                    () => Math.random()\r\n                                )\r\n                        )\r\n                );\r\n\r\n        const datasetsPath = './datasets/',\r\n            filePaths = fs\r\n                .readdirSync(datasetsPath)\r\n                .map((filePath) => path.join(datasetsPath, filePath));\r\n\r\n        const arrLaunchParams = [];\r\n\r\n        for (const filePath of filePaths) {\r\n            const samples = loadDataset({\r\n                path: filePath,\r\n                maxSamples: maxSamples,\r\n            });\r\n\r\n            assert.equal(samples[0].length, dimensions);\r\n\r\n            for (const initCenters of inits) {\r\n                arrLaunchParams.push({\r\n                    samples: samples,\r\n                    initCenters: initCenters,\r\n                });\r\n            }\r\n        }\r\n\r\n        let lastPercent = 0;\r\n\r\n        for (const launchId in arrLaunchParams) {\r\n            const { samples, initCenters } = arrLaunchParams[launchId];\r\n\r\n            const stopCondition = {\r\n                deltaVariance: deltaVarianceThreshold,\r\n                failedSwaps: 0,\r\n            };\r\n\r\n            results = results.concat(\r\n                new KMeans({\r\n                    samples: samples,\r\n                    attribution: samples.map(() => 0),\r\n                    centers: copy(initCenters),\r\n                    numIterations: stopCondition,\r\n                }).runClustering()\r\n            );\r\n\r\n            results = results.concat(\r\n                new KHarmonicMeans({\r\n                    samples: samples,\r\n                    attribution: samples.map(() => 0),\r\n                    centers: copy(initCenters),\r\n                    numIterations: stopCondition,\r\n                    weights: samples.map(() => initCenters[0].map(() => -1)),\r\n                }).runClustering()\r\n            );\r\n\r\n            for (const failedSwaps of [0, 1, 2, 3, 4, 5, 6, 7, 8]) {\r\n                const stopCondition = {\r\n                    deltaVariance: deltaVarianceThreshold,\r\n                    failedSwaps: failedSwaps,\r\n                };\r\n\r\n                for (const _ of Array(numRandomSwapRepsPerInit)) {\r\n                    results = results.concat(\r\n                        new RandomSwap({\r\n                            samples: samples,\r\n                            attribution: samples.map(() => 0),\r\n                            centers: copy(initCenters),\r\n                            numIterations: stopCondition,\r\n                        }).runClustering()\r\n                    );\r\n                }\r\n            }\r\n\r\n            const percentFinished = (launchId / arrLaunchParams.length) * 100;\r\n            if (percentFinished > lastPercent + 1) {\r\n                console.log(\r\n                    `progress: ${percentFinished.toFixed(2).padStart(5)}%    ${\r\n                        new Date().toString().split(' ')[4]\r\n                    }`\r\n                );\r\n\r\n                lastPercent = percentFinished;\r\n            }\r\n        }\r\n\r\n        console.log('');\r\n        console.log('finished!');\r\n\r\n        return results;\r\n    },\r\n});\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Report format"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(\r\n    JSON.stringify(\r\n        benchmarkStopConditionResults.find(\r\n            (report) => report.algorithm == 'Random swap'\r\n        ),\r\n        null,\r\n        2\r\n    )\r\n);\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "undefined",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Plots"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge');\r\n\r\n{\r\n    function getResultId(report) {\r\n        return JSON.stringify({\r\n            algorithm: report.algorithm,\r\n            stopCondition: report.stopCondition,\r\n        });\r\n    }\r\n    const resultIdOptions = Array.from(\r\n        new Set(\r\n            benchmarkStopConditionResults.map((result) => getResultId(result))\r\n        )\r\n    );\r\n\r\n    const aggregatedResults = resultIdOptions\r\n        .map((resultId) => {\r\n            const subsetResultId = benchmarkStopConditionResults.filter(\r\n                (result) => getResultId(result) == resultId\r\n            );\r\n\r\n            function getResultName(result) {\r\n                let name = result.algorithm;\r\n\r\n                if (result.stopCondition != undefined) {\r\n                    name += ` - ${result.stopCondition.failedSwaps} bad swaps`;\r\n                }\r\n\r\n                return name;\r\n            }\r\n\r\n            return {\r\n                name: getResultName(subsetResultId[0]),\r\n                meanRMSE:\r\n                    subsetResultId\r\n                        .map((result) => result.variance ** 0.5)\r\n                        .reduce((rmseA, rmseB) => rmseA + rmseB) /\r\n                    subsetResultId.length,\r\n                meanNumIterations:\r\n                    subsetResultId\r\n                        .map((result) => result.numIterations)\r\n                        .reduce(\r\n                            (numIterationsA, numIterationsB) =>\r\n                                numIterationsA + numIterationsB\r\n                        ) / subsetResultId.length,\r\n                peakRMSE: subsetResultId\r\n                    .map((result) => result.variance ** 0.5)\r\n                    .reduce((rmseA, rmseB) => Math.max(rmseA, rmseB)),\r\n                peakNumIterations: subsetResultId\r\n                    .map((result) => result.numIterations)\r\n                    .reduce((numIterationsA, numIterationsB) =>\r\n                        Math.max(numIterationsA, numIterationsB)\r\n                    ),\r\n            };\r\n        })\r\n        .sort((resultA, resultB) => resultA.name > resultB.name);\r\n\r\n    // mean RMSE\r\n    {\r\n        const data = [\r\n            {\r\n                x: aggregatedResults.map((result) => result.name),\r\n                y: aggregatedResults.map((result) => result.meanRMSE),\r\n                type: 'bar',\r\n            },\r\n        ];\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: 'mean RMSE',\r\n            },\r\n            xaxis: {\r\n                tickangle: 60,\r\n            },\r\n            bargap: 800,\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n\r\n    // mean number of iterations\r\n    {\r\n        const data = [\r\n            {\r\n                x: aggregatedResults.map((result) => result.name),\r\n                y: aggregatedResults.map((result) => result.meanNumIterations),\r\n                type: 'bar',\r\n            },\r\n        ];\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: 'mean number of iterations',\r\n            },\r\n            xaxis: {\r\n                tickangle: 60,\r\n            },\r\n            bargap: 800,\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n\r\n    // peak RMSE\r\n    {\r\n        const data = [\r\n            {\r\n                x: aggregatedResults.map((result) => result.name),\r\n                y: aggregatedResults.map((result) => result.peakRMSE),\r\n                type: 'bar',\r\n            },\r\n        ];\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: 'peak RMSE',\r\n            },\r\n            xaxis: {\r\n                tickangle: 60,\r\n            },\r\n            bargap: 800,\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n\r\n    // peak number of iterations\r\n    {\r\n        const data = [\r\n            {\r\n                x: aggregatedResults.map((result) => result.name),\r\n                y: aggregatedResults.map((result) => result.peakNumIterations),\r\n                type: 'bar',\r\n            },\r\n        ];\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: 'peak number of iterations',\r\n            },\r\n            xaxis: {\r\n                tickangle: 60,\r\n            },\r\n            bargap: 800,\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x3f3b7ef203c948c1ab25a399f2ba9111",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            "KM",
                                            "KHM",
                                            "RS - 0 bad swaps",
                                            "RS - 1 bad swaps",
                                            "RS - 2 bad swaps",
                                            "RS - 3 bad swaps",
                                            "RS - 4 bad swaps",
                                            "RS - 5 bad swaps",
                                            "RS - 6 bad swaps",
                                            "RS - 7 bad swaps",
                                            "RS - 8 bad swaps"
                                        ],
                                        "y": [
                                            0.14413935557055588,
                                            0.14074979150453362,
                                            0.23347245073512934,
                                            0.22355176242298977,
                                            0.21893034992482008,
                                            0.2121775760956545,
                                            0.21097973486712032,
                                            0.2056774163247821,
                                            0.20071299231377257,
                                            0.19772849308930956,
                                            0.1932634566755496
                                        ],
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "mean RMSE",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "tickangle": 60
                                    },
                                    "bargap": 800
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x3f3b7ef203c948c1ab25a399f2ba9111",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            "KM",
                                            "KHM",
                                            "RS - 0 bad swaps",
                                            "RS - 1 bad swaps",
                                            "RS - 2 bad swaps",
                                            "RS - 3 bad swaps",
                                            "RS - 4 bad swaps",
                                            "RS - 5 bad swaps",
                                            "RS - 6 bad swaps",
                                            "RS - 7 bad swaps",
                                            "RS - 8 bad swaps"
                                        ],
                                        "y": [
                                            7.013636363636364,
                                            7.289090909090909,
                                            6.701818181818182,
                                            9.616363636363637,
                                            12.06,
                                            14.227272727272727,
                                            16.283636363636365,
                                            18.221818181818183,
                                            19.841818181818184,
                                            21.58,
                                            23.087272727272726
                                        ],
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "mean number of iterations",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "tickangle": 60
                                    },
                                    "bargap": 800
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x3f3b7ef203c948c1ab25a399f2ba9111",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            "KM",
                                            "KHM",
                                            "RS - 0 bad swaps",
                                            "RS - 1 bad swaps",
                                            "RS - 2 bad swaps",
                                            "RS - 3 bad swaps",
                                            "RS - 4 bad swaps",
                                            "RS - 5 bad swaps",
                                            "RS - 6 bad swaps",
                                            "RS - 7 bad swaps",
                                            "RS - 8 bad swaps"
                                        ],
                                        "y": [
                                            0.22178056693112905,
                                            0.16700498156854104,
                                            0.42605676436580703,
                                            0.4298938185933216,
                                            0.42779736225616355,
                                            0.41044574561840835,
                                            0.41044574561840835,
                                            0.42591958907247385,
                                            0.41044574561840835,
                                            0.41058809067293556,
                                            0.3870666039448176
                                        ],
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "peak RMSE",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "tickangle": 60
                                    },
                                    "bargap": 800
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x3f3b7ef203c948c1ab25a399f2ba9111",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            "KM",
                                            "KHM",
                                            "RS - 0 bad swaps",
                                            "RS - 1 bad swaps",
                                            "RS - 2 bad swaps",
                                            "RS - 3 bad swaps",
                                            "RS - 4 bad swaps",
                                            "RS - 5 bad swaps",
                                            "RS - 6 bad swaps",
                                            "RS - 7 bad swaps",
                                            "RS - 8 bad swaps"
                                        ],
                                        "y": [
                                            23,
                                            20,
                                            18,
                                            20,
                                            24,
                                            26,
                                            28,
                                            32,
                                            32,
                                            38,
                                            38
                                        ],
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "peak number of iterations",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "tickangle": 60
                                    },
                                    "bargap": 800
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}