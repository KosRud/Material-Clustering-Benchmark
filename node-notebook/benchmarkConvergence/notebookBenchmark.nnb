{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Datasets\n\nhttp://cs.joensuu.fi/sipu/datasets/\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "# Init\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const { Plotly } = require('node-kernel');"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "import fs from 'fs';\r\n\r\nfunction loadOrGenerateReport({ loadFromFile, filePath, generationFunc }) {\r\n    if (loadFromFile) {\r\n        return JSON.parse(fs.readFileSync(filePath, 'utf-8'));\r\n    } else {\r\n        const result = generationFunc();\r\n        fs.writeFileSync(filePath, JSON.stringify(result, null, 2), {\r\n            flag: 'w',\r\n            encoding: 'utf-8',\r\n        });\r\n        return result;\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge')\r\n\r\nconst normalSizeLayout = {\r\n    width: 600,\r\n    height: 400,\r\n    font: {\r\n        size: 15,\r\n    },\r\n    margin: {\r\n        l: 80,\r\n        r: 4,\r\n        b: 40,\r\n        t: 50, // for title\r\n    },\r\n    yaxis: {\r\n        title: {\r\n            standoff: 4,\r\n        },\r\n        automargin: true,\r\n    },\r\n    xaxis: {\r\n        automargin: true,\r\n    }\r\n}\r\n\r\nconst doubleSizeLayout = merge(normalSizeLayout, {\r\n    width: 1200,\r\n    height: 800,\r\n    font: {\r\n        size: 30,\r\n    },\r\n    margin: {\r\n        l: 160,\r\n        r: 8,\r\n        b: 80,\r\n        t: 100, // for title\r\n    },\r\n});\r\n\r\nconst sharedLayout = doubleSizeLayout;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Benchmark convergence"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import fs from 'fs';\r\nimport assert from 'assert/strict';\r\nimport loadDataset from './loadDataset';\r\nimport { KMeans, RandomSwap, KHarmonicMeans } from './clustering/clustering';\r\nimport path from 'path';\r\nimport copy from 'deepcopy';\r\n\r\nconst benchmarkConvergenceResults = loadOrGenerateReport({\r\n    loadFromFile: true,\r\n    filePath: './results/convergence.json',\r\n    generationFunc: () => {\r\n        const numCenters = 6,\r\n            maxSamples = 500,\r\n            numInits = 2000,\r\n            numRandomSwapRepsPerInit = 1,\r\n            dimensions = 2,\r\n            numIterations = 60;\r\n\r\n        let results = [];\r\n\r\n        const inits =\r\n            // array of initializations\r\n            Array(numInits)\r\n                .fill()\r\n                .map(() =>\r\n                    //array of cluster centers\r\n                    Array(numCenters)\r\n                        .fill()\r\n                        .map(() =>\r\n                            // iterate over coordinates\r\n                            Array(dimensions)\r\n                                .fill()\r\n                                .map(\r\n                                    // uniform random initialization for each coordinate\r\n                                    () => Math.random()\r\n                                )\r\n                        )\r\n                );\r\n\r\n        const datasetsPath = './datasets/',\r\n            filePaths = fs\r\n                .readdirSync(datasetsPath)\r\n                .map((filePath) => path.join(datasetsPath, filePath));\r\n\r\n        const arrLaunchParams = [];\r\n\r\n        for (const filePath of filePaths) {\r\n            const samples = loadDataset({\r\n                path: filePath,\r\n                maxSamples: maxSamples,\r\n            });\r\n\r\n            assert.equal(samples[0].length, dimensions);\r\n\r\n            for (const initCenters of inits) {\r\n                arrLaunchParams.push({\r\n                    samples: samples,\r\n                    initCenters: initCenters,\r\n                });\r\n            }\r\n        }\r\n\r\n        let lastPercent = 0;\r\n\r\n        for (const launchId in arrLaunchParams) {\r\n            const { samples, initCenters } = arrLaunchParams[launchId];\r\n\r\n            results = results.concat(\r\n                new KMeans({\r\n                    samples: samples,\r\n                    attribution: samples.map(() => 0),\r\n                    centers: copy(initCenters),\r\n                    numIterations: numIterations,\r\n                }).runClustering()\r\n            );\r\n\r\n            results = results.concat(\r\n                new KHarmonicMeans({\r\n                    samples: samples,\r\n                    attribution: samples.map(() => 0),\r\n                    centers: copy(initCenters),\r\n                    numIterations: numIterations,\r\n                    weights: samples.map(() => initCenters[0].map(() => -1)),\r\n                }).runClustering()\r\n            );\r\n\r\n            for (const _ of Array(numRandomSwapRepsPerInit)) {\r\n                results = results.concat(\r\n                    new RandomSwap({\r\n                        samples: samples,\r\n                        attribution: samples.map(() => 0),\r\n                        centers: copy(initCenters),\r\n                        numIterations: numIterations,\r\n                    }).runClustering()\r\n                );\r\n            }\r\n\r\n            const percentFinished = (launchId / arrLaunchParams.length) * 100;\r\n            if (percentFinished > lastPercent + 1) {\r\n                console.log(\r\n                    `progress: ${percentFinished.toFixed(2).padStart(5)}%    ${\r\n                        new Date().toString().split(' ')[4]\r\n                    }`\r\n                );\r\n\r\n                lastPercent = percentFinished;\r\n            }\r\n        }\r\n\r\n        console.log('');\r\n        console.log('finished!');\r\n\r\n        return results;\r\n    },\r\n});\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Report format\n"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(JSON.stringify(benchmarkConvergenceResults[0], null, 2));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{",
                                "  \"algorithm\": \"KM\",",
                                "  \"numIterations\": 1,",
                                "  \"variance\": 0.030676626401117256",
                                "}",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Plots"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import merge from 'deepmerge';\r\n\r\n{\r\n    const algorithmOptions = Array.from(\r\n        new Set(benchmarkConvergenceResults.map((result) => result.algorithm))\r\n    );\r\n\r\n    // sqrt(variance)\r\n    {\r\n        const data = algorithmOptions.map((algorithm) => {\r\n            const subsetAlgorithm = benchmarkConvergenceResults.filter(\r\n                (result) => result.algorithm == algorithm\r\n            );\r\n\r\n            const numIterationsOptions = Array.from(\r\n                new Set(subsetAlgorithm.map((result) => result.numIterations))\r\n            );\r\n\r\n            return {\r\n                x: numIterationsOptions,\r\n                y: numIterationsOptions.map((numIterations) => {\r\n                    const subsetNumItrations = subsetAlgorithm.filter(\r\n                        (result) => result.numIterations == numIterations\r\n                    );\r\n\r\n                    return (\r\n                        subsetNumItrations\r\n                            .map((result) => result.variance ** 0.5)\r\n                            .reduce((a, b) => a + b) / subsetNumItrations.length\r\n                    );\r\n                }),\r\n                name: algorithm,\r\n                type: 'scatter',\r\n                mode: 'lines',\r\n\t\t\t\tline: {\r\n\t\t\t\t\twidth: 4\r\n\t\t\t\t}\r\n            };\r\n        });\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: `RMSE`,\r\n            },\r\n            xaxis: {\r\n                title: 'number of iterations',\r\n            },\r\n            title: {\r\n                text: `aggregated RMSE`,\r\n            },\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n\r\n    // change of variance\r\n    {\r\n        const sharedData = {\r\n            type: 'scatter',\r\n            mode: 'lines',\r\n\t\t\tline: {\r\n\t\t\t\twidth: 4\r\n\t\t\t}\r\n        };\r\n\r\n        const data = merge(\r\n            sharedData,\r\n            algorithmOptions.map((algorithm) => {\r\n                const subsetAlgorithm = benchmarkConvergenceResults.filter(\r\n                    (result) => result.algorithm == algorithm\r\n                );\r\n\r\n                const numIterationsOptions = Array.from(\r\n                    new Set(\r\n                        subsetAlgorithm.map((result) => result.numIterations)\r\n                    )\r\n                );\r\n\r\n                const variancePerIteration = numIterationsOptions.map(\r\n                    (numIterations) => {\r\n                        return {\r\n                            numIterations: numIterations,\r\n                            variance: (() => {\r\n                                const subsetNumIterations =\r\n                                    subsetAlgorithm.filter(\r\n                                        (result) =>\r\n                                            result.numIterations ==\r\n                                            numIterations\r\n                                    );\r\n                                return (\r\n                                    subsetNumIterations\r\n                                        .map((result) => result.variance)\r\n                                        .reduce((a, b) => a + b) /\r\n                                    subsetNumIterations.length\r\n                                );\r\n                            })(),\r\n                        };\r\n                    }\r\n                );\r\n                for (const index of [...variancePerIteration.keys()].splice(\r\n                    1\r\n                )) {\r\n                    variancePerIteration[index].deltaVariance =\r\n                        variancePerIteration[index - 1].variance -\r\n                        variancePerIteration[index].variance;\r\n                }\r\n\r\n                variancePerIteration.shift();\r\n\r\n                return {\r\n                    x: variancePerIteration.map(\r\n                        (record) => record.numIterations\r\n                    ),\r\n                    y: variancePerIteration.map(\r\n                        (record) => record.deltaVariance\r\n                    ),\r\n                    name: algorithm,\r\n                    type: 'scatter',\r\n                    mode: 'lines',\r\n\t\t\t\t\tline: {\r\n\t\t\t\t\t\twidth: 4\r\n\t\t\t\t\t}\r\n                };\r\n            })\r\n        );\r\n\r\n        data.push(\r\n            merge(\r\n                sharedData,\r\n                (() => {\r\n                    const numIterationsOptions = Array.from(\r\n                        new Set(\r\n                            benchmarkConvergenceResults\r\n                                .filter(\r\n                                    (result) => result.algorithm == 'KM'\r\n                                )\r\n                                .map((result) => result.numIterations)\r\n                        )\r\n                    );\r\n\r\n                    return {\r\n                        x: numIterationsOptions,\r\n                        y: numIterationsOptions.map(() => 1e-4),\r\n                        name: 'stop condition',\r\n                    };\r\n                })()\r\n            )\r\n        );\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: { text: `Δ MSE`, standoff: 20 },\r\n            },\r\n            xaxis: {\r\n                title: 'number of iterations',\r\n            },\r\n            title: {\r\n                text: `MSE change between iterations`,\r\n            },\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x7f1d74e8fdb2422ca6472d21226b0376",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60
                                        ],
                                        "y": [
                                            0.1843146382009552,
                                            0.1604595540066632,
                                            0.15238976343246582,
                                            0.14861962248600463,
                                            0.1466505965159211,
                                            0.1455181364900529,
                                            0.14480364247291963,
                                            0.14430136483021994,
                                            0.14393677871298033,
                                            0.14366514467675487,
                                            0.1434624017965785,
                                            0.1433058896989576,
                                            0.14318514837995597,
                                            0.14308848399301782,
                                            0.14301213312444058,
                                            0.14295178063855404,
                                            0.1429040758066965,
                                            0.1428670365845327,
                                            0.14283858787052947,
                                            0.14281780473706915,
                                            0.14280215886434663,
                                            0.1427896110182413,
                                            0.14277947576600078,
                                            0.14277071388692084,
                                            0.14276338923219115,
                                            0.142758271680099,
                                            0.14275432997906787,
                                            0.1427515516222318,
                                            0.14274942681098218,
                                            0.1427477166096635,
                                            0.1427465444149714,
                                            0.14274590161085518,
                                            0.14274549996797867,
                                            0.1427450496991645,
                                            0.14274438607789203,
                                            0.14274397250048354,
                                            0.14274379661140635,
                                            0.1427436410390307,
                                            0.14274354676101086,
                                            0.14274351017674758,
                                            0.14274349844552267,
                                            0.1427434927018037,
                                            0.14274349011198093,
                                            0.14274348894822825,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317,
                                            0.14274348871087317
                                        ],
                                        "name": "KM",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60
                                        ],
                                        "y": [
                                            0.19958090175824023,
                                            0.1606161926615385,
                                            0.1492139985893104,
                                            0.1446070258757319,
                                            0.14238934173368784,
                                            0.14111244379812704,
                                            0.1403267166824227,
                                            0.13978764162277346,
                                            0.1393809431610592,
                                            0.13906897390873907,
                                            0.1388229045668713,
                                            0.1386202105866151,
                                            0.1384479988056388,
                                            0.13830283716326838,
                                            0.13818208688550623,
                                            0.13808031889615988,
                                            0.1379924973392224,
                                            0.13791678543421235,
                                            0.1378522283749536,
                                            0.13779629764384893,
                                            0.1377478210125222,
                                            0.13770639080602354,
                                            0.13767002897058936,
                                            0.13763900060529283,
                                            0.1376099481081891,
                                            0.13758203313575162,
                                            0.13755523557024052,
                                            0.1375292225223159,
                                            0.13750557948151643,
                                            0.13748359778269334,
                                            0.13746510490537778,
                                            0.13744801536800869,
                                            0.1374319277030588,
                                            0.13741640794502336,
                                            0.13740076958777983,
                                            0.13738518649417641,
                                            0.13737017119344871,
                                            0.13735583719363267,
                                            0.13734175933844273,
                                            0.13732703060579254,
                                            0.13731123754283975,
                                            0.1372943262524591,
                                            0.13727660235202416,
                                            0.1372594023202101,
                                            0.1372420729368637,
                                            0.1372251633759615,
                                            0.13720862715969626,
                                            0.1371931352519825,
                                            0.13717853659696785,
                                            0.13716476256903642,
                                            0.13715236749597334,
                                            0.13714093918656542,
                                            0.1371311324347366,
                                            0.13712252466005914,
                                            0.13711482101449365,
                                            0.1371082262556722,
                                            0.13710233948038375,
                                            0.1370971515413559,
                                            0.13709212420648742,
                                            0.13708757589701592
                                        ],
                                        "name": "KHM",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "x": [
                                            2,
                                            4,
                                            6,
                                            8,
                                            10,
                                            12,
                                            14,
                                            16,
                                            18,
                                            20,
                                            22,
                                            24,
                                            26,
                                            28,
                                            30,
                                            32,
                                            34,
                                            36,
                                            38,
                                            40,
                                            42,
                                            44,
                                            46,
                                            48,
                                            50,
                                            52,
                                            54,
                                            56,
                                            58,
                                            60
                                        ],
                                        "y": [
                                            0.1596762407125094,
                                            0.14925988437307205,
                                            0.1452123177337127,
                                            0.143003969322917,
                                            0.1415691848789683,
                                            0.14056019622769833,
                                            0.13978959683406006,
                                            0.1392372706622475,
                                            0.13876944948742298,
                                            0.1384053325806101,
                                            0.13810311346505574,
                                            0.1378429834216994,
                                            0.13762239521929923,
                                            0.1374252363225147,
                                            0.1372453555208113,
                                            0.13710477158213666,
                                            0.1369746632212154,
                                            0.13684941958493257,
                                            0.13674104037892432,
                                            0.13664179214353586,
                                            0.13655558870068718,
                                            0.13647494603703605,
                                            0.1364058166552313,
                                            0.136342081032196,
                                            0.1362810431256219,
                                            0.13622656187064638,
                                            0.13617697041961094,
                                            0.13613144640560088,
                                            0.13608750980185266,
                                            0.13604638544544106
                                        ],
                                        "name": "Random swap",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "RMSE",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "title": "number of iterations"
                                    },
                                    "title": {
                                        "text": "aggregated RMSE"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x7f1d74e8fdb2422ca6472d21226b0376",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60
                                        ],
                                        "y": [
                                            0.008493040225130734,
                                            0.0026049690487236245,
                                            0.0011691373276848313,
                                            0.0005961759703915805,
                                            0.0003361131139335907,
                                            0.00020904571407283704,
                                            0.00014534515573479123,
                                            0.00010507283091519548,
                                            0.00007791066730442747,
                                            0.00005781825185888559,
                                            0.00004446845106098954,
                                            0.000034202750208565946,
                                            0.000027360654171634108,
                                            0.000021655245861118555,
                                            0.000017110519964301518,
                                            0.000013530410857973824,
                                            0.000010514379378271516,
                                            0.000008096372054115786,
                                            0.00000590872176760987,
                                            0.0000044643827431835315,
                                            0.000003587219304101996,
                                            0.000002888276820850466,
                                            0.0000024919947203411175,
                                            0.000002073861172385144,
                                            0.000001463571609332942,
                                            0.0000011432654159759803,
                                            8.050470060617931e-7,
                                            6.093820449533383e-7,
                                            4.797426310446107e-7,
                                            3.293134982727819e-7,
                                            1.8302575639783658e-7,
                                            1.1190514408176977e-7,
                                            1.255758771551152e-7,
                                            1.8665920825319815e-7,
                                            1.1619837745474593e-7,
                                            4.836376231789896e-8,
                                            4.220668200008437e-8,
                                            2.5156114996649492e-8,
                                            9.389125792819142e-9,
                                            2.960761129322531e-9,
                                            1.4474085749394128e-9,
                                            6.521566377204469e-10,
                                            2.9295446277166626e-10,
                                            5.974269690067757e-11,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0,
                                            0
                                        ],
                                        "name": "KM",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "x": [
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60
                                        ],
                                        "y": [
                                            0.014748211028412003,
                                            0.0036809275150964937,
                                            0.0013816586254348472,
                                            0.0006404715279768221,
                                            0.00036115177194944934,
                                            0.00022107146298959088,
                                            0.0001515490694399997,
                                            0.00011411201181412908,
                                            0.00008755988898977857,
                                            0.00006906487180841775,
                                            0.000056933212978060865,
                                            0.00004842565511998034,
                                            0.00004084955389629247,
                                            0.000034067073074392495,
                                            0.000028784362654975942,
                                            0.000024909284075821936,
                                            0.000021443083086214454,
                                            0.000018311882119238787,
                                            0.00001588138201628897,
                                            0.000013807679052072613,
                                            0.000011803064550123393,
                                            0.000010376959762949112,
                                            0.000008861659443078901,
                                            0.000008278459873372473,
                                            0.000007932153908901673,
                                            0.000007565407408347685,
                                            0.000007306954633745644,
                                            0.000006599268272965836,
                                            0.000006134053188007471,
                                            0.000005164407019808692,
                                            0.000004768762152308759,
                                            0.000004488785124493605,
                                            0.000004340395939265995,
                                            0.000004376017699734419,
                                            0.000004372473159958146,
                                            0.000004236364667419001,
                                            0.000004085615361172634,
                                            0.000004025647704377494,
                                            0.0000042198542452472065,
                                            0.0000045134300572999275,
                                            0.000004807858552478145,
                                            0.0000050372630530926,
                                            0.000004897081496264832,
                                            0.000004940914697000587,
                                            0.000004830468776109015,
                                            0.000004712120865859454,
                                            0.000004431667692723212,
                                            0.000004183009398465998,
                                            0.000003952241007739582,
                                            0.000003562007851471566,
                                            0.0000032951370679337733,
                                            0.0000028368862225389146,
                                            0.0000024945848969316897,
                                            0.0000022405199058654623,
                                            0.0000019269935607781064,
                                            0.0000017255901207206825,
                                            0.0000015257419083460066,
                                            0.0000014831258256520208,
                                            0.0000013448268341084701
                                        ],
                                        "name": "KHM",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "x": [
                                            4,
                                            6,
                                            8,
                                            10,
                                            12,
                                            14,
                                            16,
                                            18,
                                            20,
                                            22,
                                            24,
                                            26,
                                            28,
                                            30,
                                            32,
                                            34,
                                            36,
                                            38,
                                            40,
                                            42,
                                            44,
                                            46,
                                            48,
                                            50,
                                            52,
                                            54,
                                            56,
                                            58,
                                            60
                                        ],
                                        "y": [
                                            0.0033318843217207475,
                                            0.0012177486073334902,
                                            0.0006410134520747658,
                                            0.00040631869871435647,
                                            0.00028188934457790485,
                                            0.00021387320535833088,
                                            0.00015249435397790556,
                                            0.00012754314671382938,
                                            0.00009941484879497434,
                                            0.00008235416387229397,
                                            0.00007060355639274332,
                                            0.000060186416214459,
                                            0.000053591732640464324,
                                            0.000048944046610443354,
                                            0.00003825952137507388,
                                            0.000035382255395382395,
                                            0.00003405835118346079,
                                            0.000029542486441668653,
                                            0.00002704663701160251,
                                            0.00002359519304322849,
                                            0.0000220186993459201,
                                            0.000018954568832590252,
                                            0.000017265020085473898,
                                            0.00001656683115587934,
                                            0.000014796378354116346,
                                            0.000013519354840643011,
                                            0.000012468416331252313,
                                            0.000012079491212384913,
                                            0.00001130262727513931
                                        ],
                                        "name": "Random swap",
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        }
                                    },
                                    {
                                        "type": "scatter",
                                        "mode": "lines",
                                        "line": {
                                            "width": 4
                                        },
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43,
                                            44,
                                            45,
                                            46,
                                            47,
                                            48,
                                            49,
                                            50,
                                            51,
                                            52,
                                            53,
                                            54,
                                            55,
                                            56,
                                            57,
                                            58,
                                            59,
                                            60
                                        ],
                                        "y": [
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001,
                                            0.0001
                                        ],
                                        "name": "stop condition"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": {
                                            "standoff": 20,
                                            "text": "Δ MSE"
                                        },
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "title": "number of iterations"
                                    },
                                    "title": {
                                        "text": "MSE change between iterations"
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Benchmark stop condition"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import fs from 'fs';\r\nimport assert from 'assert/strict';\r\nimport loadDataset from './loadDataset';\r\nimport { KMeans, RandomSwap, KHarmonicMeans } from './clustering/clustering';\r\nimport path from 'path';\r\nimport copy from 'deepcopy';\r\n\r\nconst benchmarkStopConditionResults = loadOrGenerateReport({\r\n    loadFromFile: true,\r\n    filePath: './results/stopCondition.json',\r\n    generationFunc: () => {\r\n        const numCenters = 6,\r\n            maxSamples = 500,\r\n            numInits = 2000,\r\n            numRandomSwapRepsPerInit = 1,\r\n            dimensions = 2,\r\n            deltaVarianceThreshold = 1e-4;\r\n\r\n        let results = [];\r\n\r\n        const inits =\r\n            // array of initializations\r\n            Array(numInits)\r\n                .fill()\r\n                .map(() =>\r\n                    //array of cluster centers\r\n                    Array(numCenters)\r\n                        .fill()\r\n                        .map(() =>\r\n                            // iterate over coordinates\r\n                            Array(dimensions)\r\n                                .fill()\r\n                                .map(\r\n                                    // uniform random initialization for each coordinate\r\n                                    () => Math.random()\r\n                                )\r\n                        )\r\n                );\r\n\r\n        const datasetsPath = './datasets/',\r\n            filePaths = fs\r\n                .readdirSync(datasetsPath)\r\n                .map((filePath) => path.join(datasetsPath, filePath));\r\n\r\n        const arrLaunchParams = [];\r\n\r\n        for (const filePath of filePaths) {\r\n            const samples = loadDataset({\r\n                path: filePath,\r\n                maxSamples: maxSamples,\r\n            });\r\n\r\n            assert.equal(samples[0].length, dimensions);\r\n\r\n            for (const initCenters of inits) {\r\n                arrLaunchParams.push({\r\n                    samples: samples,\r\n                    initCenters: initCenters,\r\n                });\r\n            }\r\n        }\r\n\r\n        let lastPercent = 0;\r\n\r\n        for (const launchId in arrLaunchParams) {\r\n            const { samples, initCenters } = arrLaunchParams[launchId];\r\n\r\n            const stopCondition = {\r\n                deltaVariance: deltaVarianceThreshold,\r\n                failedSwaps: 0,\r\n            };\r\n\r\n            results = results.concat(\r\n                new KMeans({\r\n                    samples: samples,\r\n                    attribution: samples.map(() => 0),\r\n                    centers: copy(initCenters),\r\n                    numIterations: stopCondition,\r\n                }).runClustering()\r\n            );\r\n\r\n            results = results.concat(\r\n                new KHarmonicMeans({\r\n                    samples: samples,\r\n                    attribution: samples.map(() => 0),\r\n                    centers: copy(initCenters),\r\n                    numIterations: stopCondition,\r\n                    weights: samples.map(() => initCenters[0].map(() => -1)),\r\n                }).runClustering()\r\n            );\r\n\r\n            for (const failedSwaps of [0, 1, 2, 3, 4, 5, 6, 7, 8]) {\r\n                const stopCondition = {\r\n                    deltaVariance: deltaVarianceThreshold,\r\n                    failedSwaps: failedSwaps,\r\n                };\r\n\r\n                for (const _ of Array(numRandomSwapRepsPerInit)) {\r\n                    results = results.concat(\r\n                        new RandomSwap({\r\n                            samples: samples,\r\n                            attribution: samples.map(() => 0),\r\n                            centers: copy(initCenters),\r\n                            numIterations: stopCondition,\r\n                        }).runClustering()\r\n                    );\r\n                }\r\n            }\r\n\r\n            const percentFinished = (launchId / arrLaunchParams.length) * 100;\r\n            if (percentFinished > lastPercent + 1) {\r\n                console.log(\r\n                    `progress: ${percentFinished.toFixed(2).padStart(5)}%    ${\r\n                        new Date().toString().split(' ')[4]\r\n                    }`\r\n                );\r\n\r\n                lastPercent = percentFinished;\r\n            }\r\n        }\r\n\r\n        console.log('');\r\n        console.log('finished!');\r\n\r\n        return results;\r\n    },\r\n});\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Report format"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "console.log(\r\n    JSON.stringify(\r\n        benchmarkStopConditionResults.find(\r\n            (report) => report.algorithm == 'Random swap'\r\n        ),\r\n        null,\r\n        2\r\n    )\r\n);\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "undefined",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Plots"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const merge = require('deepmerge');\r\n\r\n{\r\n    function getResultId(report) {\r\n        return JSON.stringify({\r\n            algorithm: report.algorithm,\r\n            stopCondition: report.stopCondition,\r\n        });\r\n    }\r\n    const resultIdOptions = Array.from(\r\n        new Set(\r\n            benchmarkStopConditionResults.map((result) => getResultId(result))\r\n        )\r\n    );\r\n\r\n    const aggregatedResults = resultIdOptions\r\n        .map((resultId) => {\r\n            const subsetResultId = benchmarkStopConditionResults.filter(\r\n                (result) => getResultId(result) == resultId\r\n            );\r\n\r\n            function getResultName(result) {\r\n                let name = result.algorithm;\r\n\r\n                if (result.stopCondition != undefined) {\r\n                    name += ` - ${result.stopCondition.failedSwaps} bad swaps`;\r\n                }\r\n\r\n                return name;\r\n            }\r\n\r\n            return {\r\n                name: getResultName(subsetResultId[0]),\r\n                meanRMSE:\r\n                    subsetResultId\r\n                        .map((result) => result.variance ** 0.5)\r\n                        .reduce((rmseA, rmseB) => rmseA + rmseB) /\r\n                    subsetResultId.length,\r\n                meanNumIterations:\r\n                    subsetResultId\r\n                        .map((result) => result.numIterations)\r\n                        .reduce(\r\n                            (numIterationsA, numIterationsB) =>\r\n                                numIterationsA + numIterationsB\r\n                        ) / subsetResultId.length,\r\n                peakRMSE: subsetResultId\r\n                    .map((result) => result.variance ** 0.5)\r\n                    .reduce((rmseA, rmseB) => Math.max(rmseA, rmseB)),\r\n                peakNumIterations: subsetResultId\r\n                    .map((result) => result.numIterations)\r\n                    .reduce((numIterationsA, numIterationsB) =>\r\n                        Math.max(numIterationsA, numIterationsB)\r\n                    ),\r\n            };\r\n        })\r\n        .sort((resultA, resultB) => resultA.name > resultB.name);\r\n\r\n    // mean RMSE\r\n    {\r\n        const data = [\r\n            {\r\n                x: aggregatedResults.map((result) => result.name),\r\n                y: aggregatedResults.map((result) => result.meanRMSE),\r\n                type: 'bar',\r\n            },\r\n        ];\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: 'mean RMSE',\r\n            },\r\n            xaxis: {\r\n                tickangle: 60,\r\n            },\r\n            bargap: 800,\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n\r\n    // mean number of iterations\r\n    {\r\n        const data = [\r\n            {\r\n                x: aggregatedResults.map((result) => result.name),\r\n                y: aggregatedResults.map((result) => result.meanNumIterations),\r\n                type: 'bar',\r\n            },\r\n        ];\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: 'mean number of iterations',\r\n            },\r\n            xaxis: {\r\n                tickangle: 60,\r\n            },\r\n            bargap: 800,\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n\r\n    // peak RMSE\r\n    {\r\n        const data = [\r\n            {\r\n                x: aggregatedResults.map((result) => result.name),\r\n                y: aggregatedResults.map((result) => result.peakRMSE),\r\n                type: 'bar',\r\n            },\r\n        ];\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: 'peak RMSE',\r\n            },\r\n            xaxis: {\r\n                tickangle: 60,\r\n            },\r\n            bargap: 800,\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n\r\n    // peak number of iterations\r\n    {\r\n        const data = [\r\n            {\r\n                x: aggregatedResults.map((result) => result.name),\r\n                y: aggregatedResults.map((result) => result.peakNumIterations),\r\n                type: 'bar',\r\n            },\r\n        ];\r\n\r\n        const layout = merge(sharedLayout, {\r\n            yaxis: {\r\n                title: 'peak number of iterations',\r\n            },\r\n            xaxis: {\r\n                tickangle: 60,\r\n            },\r\n            bargap: 800,\r\n        });\r\n\r\n        Plotly.newPlot('', data, layout);\r\n    }\r\n}\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x65cb70910aa14edeba69dcbe5f4287ac",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            "KM",
                                            "KHM",
                                            "RS - 0 bad swaps",
                                            "RS - 1 bad swaps",
                                            "RS - 2 bad swaps",
                                            "RS - 3 bad swaps",
                                            "RS - 4 bad swaps",
                                            "RS - 5 bad swaps",
                                            "RS - 6 bad swaps",
                                            "RS - 7 bad swaps",
                                            "RS - 8 bad swaps"
                                        ],
                                        "y": [
                                            0.14352206685016153,
                                            0.13934293686034413,
                                            0.23288114760850576,
                                            0.2234544432833207,
                                            0.21682592939490888,
                                            0.21175109359091998,
                                            0.2074177671348087,
                                            0.20402984586399642,
                                            0.20063502920121398,
                                            0.19785326138233933,
                                            0.19395127093945777
                                        ],
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "mean RMSE",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "tickangle": 60
                                    },
                                    "bargap": 800
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x65cb70910aa14edeba69dcbe5f4287ac",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            "KM",
                                            "KHM",
                                            "RS - 0 bad swaps",
                                            "RS - 1 bad swaps",
                                            "RS - 2 bad swaps",
                                            "RS - 3 bad swaps",
                                            "RS - 4 bad swaps",
                                            "RS - 5 bad swaps",
                                            "RS - 6 bad swaps",
                                            "RS - 7 bad swaps",
                                            "RS - 8 bad swaps"
                                        ],
                                        "y": [
                                            6.920090909090909,
                                            7.502909090909091,
                                            6.666818181818182,
                                            9.686636363636364,
                                            12.123727272727272,
                                            14.362818181818183,
                                            16.368454545454547,
                                            18.282454545454545,
                                            20.039545454545454,
                                            21.673545454545454,
                                            23.226
                                        ],
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "mean number of iterations",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "tickangle": 60
                                    },
                                    "bargap": 800
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x65cb70910aa14edeba69dcbe5f4287ac",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            "KM",
                                            "KHM",
                                            "RS - 0 bad swaps",
                                            "RS - 1 bad swaps",
                                            "RS - 2 bad swaps",
                                            "RS - 3 bad swaps",
                                            "RS - 4 bad swaps",
                                            "RS - 5 bad swaps",
                                            "RS - 6 bad swaps",
                                            "RS - 7 bad swaps",
                                            "RS - 8 bad swaps"
                                        ],
                                        "y": [
                                            0.24231893916105413,
                                            0.22384012865973293,
                                            0.45612672384135666,
                                            0.49507239030208067,
                                            0.4277077135796555,
                                            0.43661763711250207,
                                            0.43661763711250207,
                                            0.42765264723785534,
                                            0.43634301866361697,
                                            0.43634301866361697,
                                            0.43634301866361697
                                        ],
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "peak RMSE",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "tickangle": 60
                                    },
                                    "bargap": 800
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x65cb70910aa14edeba69dcbe5f4287ac",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": [
                                            "KM",
                                            "KHM",
                                            "RS - 0 bad swaps",
                                            "RS - 1 bad swaps",
                                            "RS - 2 bad swaps",
                                            "RS - 3 bad swaps",
                                            "RS - 4 bad swaps",
                                            "RS - 5 bad swaps",
                                            "RS - 6 bad swaps",
                                            "RS - 7 bad swaps",
                                            "RS - 8 bad swaps"
                                        ],
                                        "y": [
                                            26,
                                            29,
                                            20,
                                            24,
                                            28,
                                            30,
                                            30,
                                            40,
                                            38,
                                            40,
                                            42
                                        ],
                                        "type": "bar"
                                    }
                                ],
                                "layout": {
                                    "width": 1200,
                                    "height": 800,
                                    "font": {
                                        "size": 30
                                    },
                                    "margin": {
                                        "l": 160,
                                        "r": 8,
                                        "b": 80,
                                        "t": 100
                                    },
                                    "yaxis": {
                                        "title": "peak number of iterations",
                                        "automargin": true
                                    },
                                    "xaxis": {
                                        "automargin": true,
                                        "tickangle": 60
                                    },
                                    "bargap": 800
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}