{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "http://cs.joensuu.fi/sipu/datasets/"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const { Plotly } = require('node-kernel');"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const sharedLayout = {\n    width: 600,\n    height: 400,\n    font: {\n        size: 15,\n    },\n    margin: {\n        l: 80,\n        r: 4,\n        b: 40,\n        t: 50, // for title\n    },\n};\n\nfunction zip(...rows){\n    if (rows.length == 0){\n        return [];\n    }\n    return [...rows[0].keys()].map(\n        (columnIndex) => rows.map((row) => row[columnIndex])\n    );\n}\n\nfunction transpose (arr) {\n    return [...zip(...arr)];\n}"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { Kmeans, RandomSwap, getVariance } from './clustering.ts';\nimport fs from 'fs';\nconst merge = require('deepmerge');\nconst deepcopy = require('deepcopy');\n\nconst samples = (() => {\n    let samples = fs\n        .readFileSync('./datasets/S/S1.txt', 'utf-8')\n        // get rows\n        .split('\\n')\n        .map(\n            // split columns by space\n            (line) =>\n                line\n                    .split(' ')\n                    // drop empty columns\n                    .filter((linePart) => linePart != '')\n                    .map(\n                        // convert strings to numbers\n                        (s) => Number.parseFloat(s)\n                    )\n        )\n        .filter(\n            // drop rows with invalid number of columns (e.g. empty)\n            (row) => row.length == 2\n        );\n\n    // normalize\n    samples = transpose(\n        transpose(samples).map((column) => {\n            const min = column.reduce((a, b) => Math.min(a, b));\n            const max = column.reduce((a, b) => Math.max(a, b));\n            const range = max - min;\n            return column.map((x) => (x - min) / range);\n        })\n    );\n\n    return samples;\n})();\n\nconst numCenters = 20;\nconst numInits = 1;\nconst numRepsPerInit = 40;\n\nconst inits =\n    // array of initializations\n    [...Array(numInits).keys()].map(() =>\n        //array of cluster centers\n        [...Array(numCenters).keys()].map(() =>\n            // iterate over coordinates\n            [...Array(samples[0].length).keys()].map(\n                // uniform random initialization for each coordinate\n                () => Math.random()\n            )\n        )\n    );\n\nconst result = inits.map((initCenters) => {\n    return {\n        initCenters: deepcopy(initCenters),\n        variances:\n            // multiple runs for each initialization\n            [...Array(numRepsPerInit).keys()].map(\n                // run clustering and get variance\n                () => {\n                    const centers = deepcopy(initCenters);\n                    const attribution = Array(samples.length);\n                    RandomSwap.runClustering({\n                        samples,\n                        attribution,\n                        centers,\n                        numIterations: 4,\n                    });\n                    return getVariance({\n                        samples,\n                        attribution,\n                        centers,\n                    });\n                }\n            ),\n    };\n});\n\nconsole.dir(result.map((record) => record.variances));\n\n/*\n(() => {\n    const data = [...centers.keys()]\n        // go over all centers\n        .map((centerIndex) => {\n            // generate Plotly data object for current center\n            const subset = Object.entries(samples)\n                // go over all samples\n                .map((entry) => {\n                    const [index, sample] = entry;\n                    return { index, sample, attribution: attribution[index] };\n                })\n                .filter(\n                    // filter samples belonging to current center\n                    (sampleInfo) => attribution[sampleInfo.index] == centerIndex\n                )\n                .map((sampleInfo) => sampleInfo.sample);\n\n            const transposedSubset = transpose(subset);\n\n            return {\n                x: transposedSubset[0],\n                y: transposedSubset[1],\n                type: 'scatter',\n                mode: 'markers',\n                name: `${centerIndex}`,\n            };\n        });\n\n    const layout = merge(sharedLayout, {\n        xaxis: { visible: false },\n        yaxis: { visible: false },\n        //showlegend: false,\n        margin: {\n            l: 0,\n            r: 0,\n            b: 0,\n            t: 0,\n        },\n    });\n\n    Plotly.newPlot('', data, layout);\n})();\n*/\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  [",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136,",
                                "    0.0032273557148949136, 0.0032273557148949136",
                                "  ]",
                                "]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                "(() => {\n    const data = [\n        {\n            x: variances.keys(),\n            y: variances.map((x) => x / (0.000001+x)),\n            type: 'scatter',\n            mode: 'lines',\n        },\n    ];\n\n    const layout = merge(sharedLayout, {\n        //xaxis: { visible: false },\n        //yaxis: { visible: false },\n        //showlegend: false,\n    });\n\n    Plotly.newPlot('', data, layout);\n})();\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x95b2e441300242a59bdcc69a50a5b9ef",
                                "type": "generatePlot",
                                "ele": "",
                                "data": [
                                    {
                                        "x": {},
                                        "y": [
                                            0.9999966907033933,
                                            0.9996700627174652,
                                            0.9994613049078118,
                                            0.9994584972321696,
                                            0.9994576565902219
                                        ],
                                        "type": "scatter",
                                        "mode": "lines"
                                    }
                                ],
                                "layout": {
                                    "width": 600,
                                    "height": 400,
                                    "font": {
                                        "size": 15
                                    },
                                    "margin": {
                                        "l": 80,
                                        "r": 4,
                                        "b": 40,
                                        "t": 50
                                    }
                                }
                            }
                        }
                    ]
                }
            ]
        },
        {
            "language": "javascript",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}