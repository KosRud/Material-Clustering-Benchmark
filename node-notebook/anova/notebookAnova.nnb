{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "http://cs.joensuu.fi/sipu/datasets/"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const { Plotly } = require('node-kernel');"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const sharedLayout = {\n    width: 600,\n    height: 400,\n    font: {\n        size: 15,\n    },\n    margin: {\n        l: 80,\n        r: 4,\n        b: 40,\n        t: 50, // for title\n    },\n};\n\nfunction zip(...rows){\n    if (rows.length == 0){\n        return [];\n    }\n    return [...rows[0].keys()].map(\n        (columnIndex) => rows.map((row) => row[columnIndex])\n    );\n}\n\nfunction transpose (arr) {\n    return [...zip(...arr)];\n}"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "import { Kmeans, RandomSwap, getVariance } from './clustering.ts';\nimport fs from 'fs';\nconst merge = require('deepmerge');\nconst deepcopy = require('deepcopy');\n\nconst samples = (() => {\n    let samples = fs\n        .readFileSync('./datasets/S/S1.txt', 'utf-8')\n        // get rows\n        .split('\\n')\n        .map(\n            // split columns by space\n            (line) =>\n                line\n                    .split(' ')\n                    // drop empty columns\n                    .filter((linePart) => linePart != '')\n                    .map(\n                        // convert strings to numbers\n                        (s) => Number.parseFloat(s)\n                    )\n        )\n        .filter(\n            // drop rows with invalid number of columns (e.g. empty)\n            (row) => row.length == 2\n        );\n\n    // normalize\n    samples = transpose(\n        transpose(samples).map((column) => {\n            const min = column.reduce((a, b) => Math.min(a, b));\n            const max = column.reduce((a, b) => Math.max(a, b));\n            const range = max - min;\n            return column.map((x) => (x - min) / range);\n        })\n    );\n\n    return samples;\n})();\n\nconst numCenters = 20;\nconst numInits = 10;\nconst numRepsPerInit = 10;\nconst numIteration = 6;\n\nconst inits =\n    // array of initializations\n    [...Array(numInits).keys()].map(() =>\n        //array of cluster centers\n        [...Array(numCenters).keys()].map(() =>\n            // iterate over coordinates\n            [...Array(samples[0].length).keys()].map(\n                // uniform random initialization for each coordinate\n                () => Math.random()\n            )\n        )\n    );\n\nconst result = inits.map((initCenters) => {\n    return {\n        initCenters: deepcopy(initCenters),\n        // multiple runs for each initialization\n        runResults: {\n            Rs: [...Array(numRepsPerInit).keys()].map(() => {\n                const centers = deepcopy(initCenters);\n                const attribution = Array(samples.length);\n                RandomSwap.runClustering({\n                    samples,\n                    attribution,\n                    centers,\n                    numIterations: numIteration,\n                });\n                return {\n                    quality: getVariance({\n                        samples,\n                        attribution,\n                        centers,\n                    }),\n                    centers: deepcopy(centers)\n                };\n            }),\n            Km: (() => {\n                const centers = deepcopy(initCenters);\n                const attribution = Array(samples.length);\n                Kmeans.runClustering({\n                    samples,\n                    attribution,\n                    centers,\n                    numIterations: numIteration,\n                });\n                return {\n                    quality: getVariance({\n                        samples,\n                        attribution,\n                        centers,\n                    }),\n                    centers: deepcopy(centers),\n                };\n            })(),\n        },\n    };\n});\n\nconsole.log(JSON.stringify(result.map((r) => r.runResults.Rs.map((r)=>r.quality)), null, 2));\nconsole.log(JSON.stringify(result.map((r) => r.runResults.Km.quality), null, 2));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[",
                                "  [",
                                "    0.004921948988479036,",
                                "    0.003204355642273341,",
                                "    0.005013833246367822,",
                                "    0.0032896085642901314,",
                                "    0.004620334168558596,",
                                "    0.0043162289094880535,",
                                "    0.004993323041230713,",
                                "    0.0034233160825317796,",
                                "    0.0019275491182196576,",
                                "    0.003893697767421139",
                                "  ],",
                                "  [",
                                "    0.00239221618457966,",
                                "    0.001900544785988638,",
                                "    0.002520141735616367,",
                                "    0.002838453706099441,",
                                "    0.0019173033910842919,",
                                "    0.0030197743422286107,",
                                "    0.003229170263643097,",
                                "    0.0018527422517197075,",
                                "    0.002930784189961966,",
                                "    0.0029561302379458127",
                                "  ],",
                                "  [",
                                "    0.002850297234321655,",
                                "    0.004108632521970634,",
                                "    0.0036874882309642955,",
                                "    0.0033492424864668144,",
                                "    0.002986597788988598,",
                                "    0.003678936192637066,",
                                "    0.0018703608899355625,",
                                "    0.0030373905743830325,",
                                "    0.003049205492404809,",
                                "    0.00308823798418832",
                                "  ],",
                                "  [",
                                "    0.002900243978859298,",
                                "    0.0031427868766671333,",
                                "    0.004206501130072415,",
                                "    0.0018967165666579006,",
                                "    0.0032083133052283478,",
                                "    0.0031781935485669954,",
                                "    0.004178334857131729,",
                                "    0.0019485036010899195,",
                                "    0.002932240635908407,",
                                "    0.0018865949698219436",
                                "  ],",
                                "  [",
                                "    0.0018484725134396975,",
                                "    0.0018441144095330505,",
                                "    0.003045924656692201,",
                                "    0.0018823797989046581,",
                                "    0.003051313292525133,",
                                "    0.001877142321433777,",
                                "    0.0018449836381498287,",
                                "    0.0018872624890086285,",
                                "    0.0018593984160242172,",
                                "    0.0018869432460356292",
                                "  ],",
                                "  [",
                                "    0.001977228822267029,",
                                "    0.0019302107097639997,",
                                "    0.0029431415454752446,",
                                "    0.0018610892812178385,",
                                "    0.002919210557634376,",
                                "    0.0018641065045826891,",
                                "    0.0018834207234442104,",
                                "    0.0018619434840549118,",
                                "    0.0029349252702017053,",
                                "    0.0018463701050105783",
                                "  ],",
                                "  [",
                                "    0.0023324685695242315,",
                                "    0.00260941708425452,",
                                "    0.0018832514834391538,",
                                "    0.0031638725515118786,",
                                "    0.0031816036629976766,",
                                "    0.001869459211471748,",
                                "    0.0018771786502722548,",
                                "    0.001896987273170917,",
                                "    0.001851095526206852,",
                                "    0.0030764519871939113",
                                "  ],",
                                "  [",
                                "    0.004314699128606973,",
                                "    0.001928300143903951,",
                                "    0.002976205360332836,",
                                "    0.0032942068855229024,",
                                "    0.002921732183216341,",
                                "    0.0018838169375090153,",
                                "    0.0027346984748027768,",
                                "    0.002933568044277913,",
                                "    0.00289288664415219,",
                                "    0.0020839218090148064",
                                "  ],",
                                "  [",
                                "    0.0019212893850490684,",
                                "    0.0018322881312154266,",
                                "    0.0018218901181874764,",
                                "    0.0032513410147991728,",
                                "    0.0018595596273486895,",
                                "    0.0018213225376430063,",
                                "    0.0018304894336763696,",
                                "    0.0018360458164448652,",
                                "    0.002892651368116905,",
                                "    0.0018386784472799462",
                                "  ],",
                                "  [",
                                "    0.001841719003034811,",
                                "    0.0018452941872101037,",
                                "    0.0028868456168654752,",
                                "    0.0018367517483919137,",
                                "    0.0018607848342109847,",
                                "    0.0018294379526932066,",
                                "    0.0018414480526160097,",
                                "    0.0028368166582729637,",
                                "    0.002873864599185497,",
                                "    0.0018431888192824142",
                                "  ]",
                                "]",
                                "[",
                                "  0.004016632651807022,",
                                "  0.0019131915744695228,",
                                "  0.004743551455016004,",
                                "  0.003190114422971003,",
                                "  0.001841701551430424,",
                                "  0.0018574872595797693,",
                                "  0.001900397929943788,",
                                "  0.002912744364981877,",
                                "  0.0018159646142922178,",
                                "  0.001820244043188503",
                                "]",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Important\n\nUse standard deviation of sample distance from the nearest cluster as the measure clustering quality - its linear.\n\nAnalyze the means of standard deviation of clustering quality."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                ""
            ],
            "outputs": []
        }
    ]
}